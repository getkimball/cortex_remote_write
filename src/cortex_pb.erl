%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.14.1
-module(cortex_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_WriteRequest.SourceEnum'/1, 'enum_value_by_symbol_WriteRequest.SourceEnum'/1]).
-export(['enum_symbol_by_value_MetricMetadata.MetricType'/1, 'enum_value_by_symbol_MetricMetadata.MetricType'/1]).
-export([enum_symbol_by_value_MatchType/1, enum_value_by_symbol_MatchType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("cortex_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'WriteRequest.SourceEnum'() :: 'API' | 'RULE'.
-type 'MetricMetadata.MetricType'() :: 'UNKNOWN' | 'COUNTER' | 'GAUGE' | 'HISTOGRAM' | 'GAUGEHISTOGRAM' | 'SUMMARY' | 'INFO' | 'STATESET'.
-type 'MatchType'() :: 'EQUAL' | 'NOT_EQUAL' | 'REGEX_MATCH' | 'REGEX_NO_MATCH'.
-export_type(['WriteRequest.SourceEnum'/0, 'MetricMetadata.MetricType'/0, 'MatchType'/0]).

%% message types
-type 'WriteRequest'() :: #'WriteRequest'{}.

-type 'WriteResponse'() :: #'WriteResponse'{}.

-type 'ReadRequest'() :: #'ReadRequest'{}.

-type 'ReadResponse'() :: #'ReadResponse'{}.

-type 'QueryRequest'() :: #'QueryRequest'{}.

-type 'QueryResponse'() :: #'QueryResponse'{}.

-type 'QueryStreamResponse'() :: #'QueryStreamResponse'{}.

-type 'LabelValuesRequest'() :: #'LabelValuesRequest'{}.

-type 'LabelValuesResponse'() :: #'LabelValuesResponse'{}.

-type 'LabelNamesRequest'() :: #'LabelNamesRequest'{}.

-type 'LabelNamesResponse'() :: #'LabelNamesResponse'{}.

-type 'UserStatsRequest'() :: #'UserStatsRequest'{}.

-type 'UserStatsResponse'() :: #'UserStatsResponse'{}.

-type 'UserIDStatsResponse'() :: #'UserIDStatsResponse'{}.

-type 'UsersStatsResponse'() :: #'UsersStatsResponse'{}.

-type 'MetricsForLabelMatchersRequest'() :: #'MetricsForLabelMatchersRequest'{}.

-type 'MetricsForLabelMatchersResponse'() :: #'MetricsForLabelMatchersResponse'{}.

-type 'MetricsMetadataRequest'() :: #'MetricsMetadataRequest'{}.

-type 'MetricsMetadataResponse'() :: #'MetricsMetadataResponse'{}.

-type 'TimeSeriesChunk'() :: #'TimeSeriesChunk'{}.

-type 'Chunk'() :: #'Chunk'{}.

-type 'TransferChunksResponse'() :: #'TransferChunksResponse'{}.

-type 'TimeSeries'() :: #'TimeSeries'{}.

-type 'LabelPair'() :: #'LabelPair'{}.

-type 'Sample'() :: #'Sample'{}.

-type 'LabelMatchers'() :: #'LabelMatchers'{}.

-type 'MetricMetadata'() :: #'MetricMetadata'{}.

-type 'CortexMetric'() :: #'CortexMetric'{}.

-type 'LabelMatcher'() :: #'LabelMatcher'{}.

-type 'TimeSeriesFile'() :: #'TimeSeriesFile'{}.

-export_type(['WriteRequest'/0, 'WriteResponse'/0, 'ReadRequest'/0, 'ReadResponse'/0, 'QueryRequest'/0, 'QueryResponse'/0, 'QueryStreamResponse'/0, 'LabelValuesRequest'/0, 'LabelValuesResponse'/0, 'LabelNamesRequest'/0, 'LabelNamesResponse'/0, 'UserStatsRequest'/0, 'UserStatsResponse'/0, 'UserIDStatsResponse'/0, 'UsersStatsResponse'/0, 'MetricsForLabelMatchersRequest'/0, 'MetricsForLabelMatchersResponse'/0, 'MetricsMetadataRequest'/0, 'MetricsMetadataResponse'/0, 'TimeSeriesChunk'/0, 'Chunk'/0, 'TransferChunksResponse'/0, 'TimeSeries'/0, 'LabelPair'/0, 'Sample'/0, 'LabelMatchers'/0, 'MetricMetadata'/0, 'CortexMetric'/0, 'LabelMatcher'/0, 'TimeSeriesFile'/0]).

-spec encode_msg(#'WriteRequest'{} | #'WriteResponse'{} | #'ReadRequest'{} | #'ReadResponse'{} | #'QueryRequest'{} | #'QueryResponse'{} | #'QueryStreamResponse'{} | #'LabelValuesRequest'{} | #'LabelValuesResponse'{} | #'LabelNamesRequest'{} | #'LabelNamesResponse'{} | #'UserStatsRequest'{} | #'UserStatsResponse'{} | #'UserIDStatsResponse'{} | #'UsersStatsResponse'{} | #'MetricsForLabelMatchersRequest'{} | #'MetricsForLabelMatchersResponse'{} | #'MetricsMetadataRequest'{} | #'MetricsMetadataResponse'{} | #'TimeSeriesChunk'{} | #'Chunk'{} | #'TransferChunksResponse'{} | #'TimeSeries'{} | #'LabelPair'{} | #'Sample'{} | #'LabelMatchers'{} | #'MetricMetadata'{} | #'CortexMetric'{} | #'LabelMatcher'{} | #'TimeSeriesFile'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'WriteRequest'{} | #'WriteResponse'{} | #'ReadRequest'{} | #'ReadResponse'{} | #'QueryRequest'{} | #'QueryResponse'{} | #'QueryStreamResponse'{} | #'LabelValuesRequest'{} | #'LabelValuesResponse'{} | #'LabelNamesRequest'{} | #'LabelNamesResponse'{} | #'UserStatsRequest'{} | #'UserStatsResponse'{} | #'UserIDStatsResponse'{} | #'UsersStatsResponse'{} | #'MetricsForLabelMatchersRequest'{} | #'MetricsForLabelMatchersResponse'{} | #'MetricsMetadataRequest'{} | #'MetricsMetadataResponse'{} | #'TimeSeriesChunk'{} | #'Chunk'{} | #'TransferChunksResponse'{} | #'TimeSeries'{} | #'LabelPair'{} | #'Sample'{} | #'LabelMatchers'{} | #'MetricMetadata'{} | #'CortexMetric'{} | #'LabelMatcher'{} | #'TimeSeriesFile'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'WriteRequest'{} | #'WriteResponse'{} | #'ReadRequest'{} | #'ReadResponse'{} | #'QueryRequest'{} | #'QueryResponse'{} | #'QueryStreamResponse'{} | #'LabelValuesRequest'{} | #'LabelValuesResponse'{} | #'LabelNamesRequest'{} | #'LabelNamesResponse'{} | #'UserStatsRequest'{} | #'UserStatsResponse'{} | #'UserIDStatsResponse'{} | #'UsersStatsResponse'{} | #'MetricsForLabelMatchersRequest'{} | #'MetricsForLabelMatchersResponse'{} | #'MetricsMetadataRequest'{} | #'MetricsMetadataResponse'{} | #'TimeSeriesChunk'{} | #'Chunk'{} | #'TransferChunksResponse'{} | #'TimeSeries'{} | #'LabelPair'{} | #'Sample'{} | #'LabelMatchers'{} | #'MetricMetadata'{} | #'CortexMetric'{} | #'LabelMatcher'{} | #'TimeSeriesFile'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'WriteRequest' -> encode_msg_WriteRequest(id(Msg, TrUserData), TrUserData);
        'WriteResponse' -> encode_msg_WriteResponse(id(Msg, TrUserData), TrUserData);
        'ReadRequest' -> encode_msg_ReadRequest(id(Msg, TrUserData), TrUserData);
        'ReadResponse' -> encode_msg_ReadResponse(id(Msg, TrUserData), TrUserData);
        'QueryRequest' -> encode_msg_QueryRequest(id(Msg, TrUserData), TrUserData);
        'QueryResponse' -> encode_msg_QueryResponse(id(Msg, TrUserData), TrUserData);
        'QueryStreamResponse' -> encode_msg_QueryStreamResponse(id(Msg, TrUserData), TrUserData);
        'LabelValuesRequest' -> encode_msg_LabelValuesRequest(id(Msg, TrUserData), TrUserData);
        'LabelValuesResponse' -> encode_msg_LabelValuesResponse(id(Msg, TrUserData), TrUserData);
        'LabelNamesRequest' -> encode_msg_LabelNamesRequest(id(Msg, TrUserData), TrUserData);
        'LabelNamesResponse' -> encode_msg_LabelNamesResponse(id(Msg, TrUserData), TrUserData);
        'UserStatsRequest' -> encode_msg_UserStatsRequest(id(Msg, TrUserData), TrUserData);
        'UserStatsResponse' -> encode_msg_UserStatsResponse(id(Msg, TrUserData), TrUserData);
        'UserIDStatsResponse' -> encode_msg_UserIDStatsResponse(id(Msg, TrUserData), TrUserData);
        'UsersStatsResponse' -> encode_msg_UsersStatsResponse(id(Msg, TrUserData), TrUserData);
        'MetricsForLabelMatchersRequest' -> encode_msg_MetricsForLabelMatchersRequest(id(Msg, TrUserData), TrUserData);
        'MetricsForLabelMatchersResponse' -> encode_msg_MetricsForLabelMatchersResponse(id(Msg, TrUserData), TrUserData);
        'MetricsMetadataRequest' -> encode_msg_MetricsMetadataRequest(id(Msg, TrUserData), TrUserData);
        'MetricsMetadataResponse' -> encode_msg_MetricsMetadataResponse(id(Msg, TrUserData), TrUserData);
        'TimeSeriesChunk' -> encode_msg_TimeSeriesChunk(id(Msg, TrUserData), TrUserData);
        'Chunk' -> encode_msg_Chunk(id(Msg, TrUserData), TrUserData);
        'TransferChunksResponse' -> encode_msg_TransferChunksResponse(id(Msg, TrUserData), TrUserData);
        'TimeSeries' -> encode_msg_TimeSeries(id(Msg, TrUserData), TrUserData);
        'LabelPair' -> encode_msg_LabelPair(id(Msg, TrUserData), TrUserData);
        'Sample' -> encode_msg_Sample(id(Msg, TrUserData), TrUserData);
        'LabelMatchers' -> encode_msg_LabelMatchers(id(Msg, TrUserData), TrUserData);
        'MetricMetadata' -> encode_msg_MetricMetadata(id(Msg, TrUserData), TrUserData);
        'CortexMetric' -> encode_msg_CortexMetric(id(Msg, TrUserData), TrUserData);
        'LabelMatcher' -> encode_msg_LabelMatcher(id(Msg, TrUserData), TrUserData);
        'TimeSeriesFile' -> encode_msg_TimeSeriesFile(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_WriteRequest(Msg, TrUserData) -> encode_msg_WriteRequest(Msg, <<>>, TrUserData).


encode_msg_WriteRequest(#'WriteRequest'{timeseries = F1, 'Source' = F2, metadata = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_WriteRequest_timeseries(TrF1, Bin, TrUserData)
             end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 'API'; TrF2 =:= 0 -> B1;
                       true -> 'e_enum_WriteRequest.SourceEnum'(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_WriteRequest_metadata(TrF3, B2, TrUserData)
        end
    end.

encode_msg_WriteResponse(_Msg, _TrUserData) -> <<>>.

encode_msg_ReadRequest(Msg, TrUserData) -> encode_msg_ReadRequest(Msg, <<>>, TrUserData).


encode_msg_ReadRequest(#'ReadRequest'{queries = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_ReadRequest_queries(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_ReadResponse(Msg, TrUserData) -> encode_msg_ReadResponse(Msg, <<>>, TrUserData).


encode_msg_ReadResponse(#'ReadResponse'{results = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_ReadResponse_results(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_QueryRequest(Msg, TrUserData) -> encode_msg_QueryRequest(Msg, <<>>, TrUserData).


encode_msg_QueryRequest(#'QueryRequest'{start_timestamp_ms = F1, end_timestamp_ms = F2, matchers = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_QueryRequest_matchers(TrF3, B2, TrUserData)
        end
    end.

encode_msg_QueryResponse(Msg, TrUserData) -> encode_msg_QueryResponse(Msg, <<>>, TrUserData).


encode_msg_QueryResponse(#'QueryResponse'{timeseries = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_QueryResponse_timeseries(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_QueryStreamResponse(Msg, TrUserData) -> encode_msg_QueryStreamResponse(Msg, <<>>, TrUserData).


encode_msg_QueryStreamResponse(#'QueryStreamResponse'{chunkseries = F1, timeseries = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_QueryStreamResponse_chunkseries(TrF1, Bin, TrUserData)
             end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_QueryStreamResponse_timeseries(TrF2, B1, TrUserData)
        end
    end.

encode_msg_LabelValuesRequest(Msg, TrUserData) -> encode_msg_LabelValuesRequest(Msg, <<>>, TrUserData).


encode_msg_LabelValuesRequest(#'LabelValuesRequest'{label_name = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case is_empty_string(TrF1) of
                   true -> Bin;
                   false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_LabelValuesResponse(Msg, TrUserData) -> encode_msg_LabelValuesResponse(Msg, <<>>, TrUserData).


encode_msg_LabelValuesResponse(#'LabelValuesResponse'{label_values = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_LabelValuesResponse_label_values(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_LabelNamesRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_LabelNamesResponse(Msg, TrUserData) -> encode_msg_LabelNamesResponse(Msg, <<>>, TrUserData).


encode_msg_LabelNamesResponse(#'LabelNamesResponse'{label_names = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_LabelNamesResponse_label_names(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_UserStatsRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_UserStatsResponse(Msg, TrUserData) -> encode_msg_UserStatsResponse(Msg, <<>>, TrUserData).


encode_msg_UserStatsResponse(#'UserStatsResponse'{ingestion_rate = F1, num_series = F2, api_ingestion_rate = F3, rule_ingestion_rate = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0.0 -> Bin;
                       true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0.0 -> B2;
                       true -> e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= 0.0 -> B3;
                  true -> e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
               end
           end
    end.

encode_msg_UserIDStatsResponse(Msg, TrUserData) -> encode_msg_UserIDStatsResponse(Msg, <<>>, TrUserData).


encode_msg_UserIDStatsResponse(#'UserIDStatsResponse'{user_id = F1, data = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_UserIDStatsResponse_data(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_UsersStatsResponse(Msg, TrUserData) -> encode_msg_UsersStatsResponse(Msg, <<>>, TrUserData).


encode_msg_UsersStatsResponse(#'UsersStatsResponse'{stats = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_UsersStatsResponse_stats(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_MetricsForLabelMatchersRequest(Msg, TrUserData) -> encode_msg_MetricsForLabelMatchersRequest(Msg, <<>>, TrUserData).


encode_msg_MetricsForLabelMatchersRequest(#'MetricsForLabelMatchersRequest'{start_timestamp_ms = F1, end_timestamp_ms = F2, matchers_set = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_MetricsForLabelMatchersRequest_matchers_set(TrF3, B2, TrUserData)
        end
    end.

encode_msg_MetricsForLabelMatchersResponse(Msg, TrUserData) -> encode_msg_MetricsForLabelMatchersResponse(Msg, <<>>, TrUserData).


encode_msg_MetricsForLabelMatchersResponse(#'MetricsForLabelMatchersResponse'{metric = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_MetricsForLabelMatchersResponse_metric(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_MetricsMetadataRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_MetricsMetadataResponse(Msg, TrUserData) -> encode_msg_MetricsMetadataResponse(Msg, <<>>, TrUserData).


encode_msg_MetricsMetadataResponse(#'MetricsMetadataResponse'{metadata = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_MetricsMetadataResponse_metadata(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_TimeSeriesChunk(Msg, TrUserData) -> encode_msg_TimeSeriesChunk(Msg, <<>>, TrUserData).


encode_msg_TimeSeriesChunk(#'TimeSeriesChunk'{from_ingester_id = F1, user_id = F2, labels = F3, chunks = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_TimeSeriesChunk_labels(TrF3, B2, TrUserData)
             end
         end,
    begin
        TrF4 = id(F4, TrUserData),
        if TrF4 == [] -> B3;
           true -> e_field_TimeSeriesChunk_chunks(TrF4, B3, TrUserData)
        end
    end.

encode_msg_Chunk(Msg, TrUserData) -> encode_msg_Chunk(Msg, <<>>, TrUserData).


encode_msg_Chunk(#'Chunk'{start_timestamp_ms = F1, end_timestamp_ms = F2, encoding = F3, data = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               case iolist_size(TrF4) of
                   0 -> B3;
                   _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
               end
           end
    end.

encode_msg_TransferChunksResponse(_Msg, _TrUserData) -> <<>>.

encode_msg_TimeSeries(Msg, TrUserData) -> encode_msg_TimeSeries(Msg, <<>>, TrUserData).


encode_msg_TimeSeries(#'TimeSeries'{labels = F1, samples = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_TimeSeries_labels(TrF1, Bin, TrUserData)
             end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_TimeSeries_samples(TrF2, B1, TrUserData)
        end
    end.

encode_msg_LabelPair(Msg, TrUserData) -> encode_msg_LabelPair(Msg, <<>>, TrUserData).


encode_msg_LabelPair(#'LabelPair'{name = F1, value = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_Sample(Msg, TrUserData) -> encode_msg_Sample(Msg, <<>>, TrUserData).


encode_msg_Sample(#'Sample'{value = F1, timestamp_ms = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0.0 -> Bin;
                       true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_LabelMatchers(Msg, TrUserData) -> encode_msg_LabelMatchers(Msg, <<>>, TrUserData).


encode_msg_LabelMatchers(#'LabelMatchers'{matchers = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_LabelMatchers_matchers(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_MetricMetadata(Msg, TrUserData) -> encode_msg_MetricMetadata(Msg, <<>>, TrUserData).


encode_msg_MetricMetadata(#'MetricMetadata'{type = F1, metric_name = F2, help = F3, unit = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'UNKNOWN'; TrF1 =:= 0 -> Bin;
                       true -> 'e_enum_MetricMetadata.MetricType'(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 34>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               case is_empty_string(TrF4) of
                   true -> B3;
                   false -> e_type_string(TrF4, <<B3/binary, 42>>, TrUserData)
               end
           end
    end.

encode_msg_CortexMetric(Msg, TrUserData) -> encode_msg_CortexMetric(Msg, <<>>, TrUserData).


encode_msg_CortexMetric(#'CortexMetric'{labels = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_CortexMetric_labels(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_LabelMatcher(Msg, TrUserData) -> encode_msg_LabelMatcher(Msg, <<>>, TrUserData).


encode_msg_LabelMatcher(#'LabelMatcher'{type = F1, name = F2, value = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'EQUAL'; TrF1 =:= 0 -> Bin;
                       true -> e_enum_MatchType(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_TimeSeriesFile(Msg, TrUserData) -> encode_msg_TimeSeriesFile(Msg, <<>>, TrUserData).


encode_msg_TimeSeriesFile(#'TimeSeriesFile'{from_ingester_id = F1, user_id = F2, filename = F3, data = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               case iolist_size(TrF4) of
                   0 -> B3;
                   _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
               end
           end
    end.

e_mfield_WriteRequest_timeseries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeSeries(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_WriteRequest_timeseries([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_WriteRequest_timeseries(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_WriteRequest_timeseries(Rest, Bin3, TrUserData);
e_field_WriteRequest_timeseries([], Bin, _TrUserData) -> Bin.

e_mfield_WriteRequest_metadata(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MetricMetadata(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_WriteRequest_metadata([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_WriteRequest_metadata(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_WriteRequest_metadata(Rest, Bin3, TrUserData);
e_field_WriteRequest_metadata([], Bin, _TrUserData) -> Bin.

e_mfield_ReadRequest_queries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_QueryRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ReadRequest_queries([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ReadRequest_queries(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ReadRequest_queries(Rest, Bin3, TrUserData);
e_field_ReadRequest_queries([], Bin, _TrUserData) -> Bin.

e_mfield_ReadResponse_results(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_QueryResponse(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ReadResponse_results([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ReadResponse_results(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ReadResponse_results(Rest, Bin3, TrUserData);
e_field_ReadResponse_results([], Bin, _TrUserData) -> Bin.

e_mfield_QueryRequest_matchers(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelMatcher(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_QueryRequest_matchers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_QueryRequest_matchers(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryRequest_matchers(Rest, Bin3, TrUserData);
e_field_QueryRequest_matchers([], Bin, _TrUserData) -> Bin.

e_mfield_QueryResponse_timeseries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeSeries(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_QueryResponse_timeseries([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_QueryResponse_timeseries(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryResponse_timeseries(Rest, Bin3, TrUserData);
e_field_QueryResponse_timeseries([], Bin, _TrUserData) -> Bin.

e_mfield_QueryStreamResponse_chunkseries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeSeriesChunk(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_QueryStreamResponse_chunkseries([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_QueryStreamResponse_chunkseries(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryStreamResponse_chunkseries(Rest, Bin3, TrUserData);
e_field_QueryStreamResponse_chunkseries([], Bin, _TrUserData) -> Bin.

e_mfield_QueryStreamResponse_timeseries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeSeries(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_QueryStreamResponse_timeseries([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_QueryStreamResponse_timeseries(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryStreamResponse_timeseries(Rest, Bin3, TrUserData);
e_field_QueryStreamResponse_timeseries([], Bin, _TrUserData) -> Bin.

e_field_LabelValuesResponse_label_values([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_LabelValuesResponse_label_values(Rest, Bin3, TrUserData);
e_field_LabelValuesResponse_label_values([], Bin, _TrUserData) -> Bin.

e_field_LabelNamesResponse_label_names([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_LabelNamesResponse_label_names(Rest, Bin3, TrUserData);
e_field_LabelNamesResponse_label_names([], Bin, _TrUserData) -> Bin.

e_mfield_UserIDStatsResponse_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_UserStatsResponse(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UsersStatsResponse_stats(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_UserIDStatsResponse(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UsersStatsResponse_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_UsersStatsResponse_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UsersStatsResponse_stats(Rest, Bin3, TrUserData);
e_field_UsersStatsResponse_stats([], Bin, _TrUserData) -> Bin.

e_mfield_MetricsForLabelMatchersRequest_matchers_set(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelMatchers(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MetricsForLabelMatchersRequest_matchers_set([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_MetricsForLabelMatchersRequest_matchers_set(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetricsForLabelMatchersRequest_matchers_set(Rest, Bin3, TrUserData);
e_field_MetricsForLabelMatchersRequest_matchers_set([], Bin, _TrUserData) -> Bin.

e_mfield_MetricsForLabelMatchersResponse_metric(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_CortexMetric(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MetricsForLabelMatchersResponse_metric([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_MetricsForLabelMatchersResponse_metric(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetricsForLabelMatchersResponse_metric(Rest, Bin3, TrUserData);
e_field_MetricsForLabelMatchersResponse_metric([], Bin, _TrUserData) -> Bin.

e_mfield_MetricsMetadataResponse_metadata(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MetricMetadata(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MetricsMetadataResponse_metadata([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_MetricsMetadataResponse_metadata(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetricsMetadataResponse_metadata(Rest, Bin3, TrUserData);
e_field_MetricsMetadataResponse_metadata([], Bin, _TrUserData) -> Bin.

e_mfield_TimeSeriesChunk_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelPair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeSeriesChunk_labels([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_TimeSeriesChunk_labels(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeSeriesChunk_labels(Rest, Bin3, TrUserData);
e_field_TimeSeriesChunk_labels([], Bin, _TrUserData) -> Bin.

e_mfield_TimeSeriesChunk_chunks(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Chunk(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeSeriesChunk_chunks([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_TimeSeriesChunk_chunks(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeSeriesChunk_chunks(Rest, Bin3, TrUserData);
e_field_TimeSeriesChunk_chunks([], Bin, _TrUserData) -> Bin.

e_mfield_TimeSeries_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelPair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeSeries_labels([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_TimeSeries_labels(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeSeries_labels(Rest, Bin3, TrUserData);
e_field_TimeSeries_labels([], Bin, _TrUserData) -> Bin.

e_mfield_TimeSeries_samples(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Sample(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeSeries_samples([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_TimeSeries_samples(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeSeries_samples(Rest, Bin3, TrUserData);
e_field_TimeSeries_samples([], Bin, _TrUserData) -> Bin.

e_mfield_LabelMatchers_matchers(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelMatcher(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_LabelMatchers_matchers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_LabelMatchers_matchers(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_LabelMatchers_matchers(Rest, Bin3, TrUserData);
e_field_LabelMatchers_matchers([], Bin, _TrUserData) -> Bin.

e_mfield_CortexMetric_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LabelPair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CortexMetric_labels([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_CortexMetric_labels(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CortexMetric_labels(Rest, Bin3, TrUserData);
e_field_CortexMetric_labels([], Bin, _TrUserData) -> Bin.

'e_enum_WriteRequest.SourceEnum'('API', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_WriteRequest.SourceEnum'('RULE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_WriteRequest.SourceEnum'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_MetricMetadata.MetricType'('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_MetricMetadata.MetricType'('COUNTER', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_MetricMetadata.MetricType'('GAUGE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_MetricMetadata.MetricType'('HISTOGRAM', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_MetricMetadata.MetricType'('GAUGEHISTOGRAM', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_MetricMetadata.MetricType'('SUMMARY', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_MetricMetadata.MetricType'('INFO', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_MetricMetadata.MetricType'('STATESET', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_MetricMetadata.MetricType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_MatchType('EQUAL', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_MatchType('NOT_EQUAL', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MatchType('REGEX_MATCH', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_MatchType('REGEX_NO_MATCH', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_MatchType(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('WriteRequest', Bin, TrUserData) -> id(decode_msg_WriteRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('WriteResponse', Bin, TrUserData) -> id(decode_msg_WriteResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadRequest', Bin, TrUserData) -> id(decode_msg_ReadRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadResponse', Bin, TrUserData) -> id(decode_msg_ReadResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryRequest', Bin, TrUserData) -> id(decode_msg_QueryRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryResponse', Bin, TrUserData) -> id(decode_msg_QueryResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryStreamResponse', Bin, TrUserData) -> id(decode_msg_QueryStreamResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelValuesRequest', Bin, TrUserData) -> id(decode_msg_LabelValuesRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelValuesResponse', Bin, TrUserData) -> id(decode_msg_LabelValuesResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelNamesRequest', Bin, TrUserData) -> id(decode_msg_LabelNamesRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelNamesResponse', Bin, TrUserData) -> id(decode_msg_LabelNamesResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserStatsRequest', Bin, TrUserData) -> id(decode_msg_UserStatsRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserStatsResponse', Bin, TrUserData) -> id(decode_msg_UserStatsResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserIDStatsResponse', Bin, TrUserData) -> id(decode_msg_UserIDStatsResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UsersStatsResponse', Bin, TrUserData) -> id(decode_msg_UsersStatsResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetricsForLabelMatchersRequest', Bin, TrUserData) -> id(decode_msg_MetricsForLabelMatchersRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetricsForLabelMatchersResponse', Bin, TrUserData) -> id(decode_msg_MetricsForLabelMatchersResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetricsMetadataRequest', Bin, TrUserData) -> id(decode_msg_MetricsMetadataRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetricsMetadataResponse', Bin, TrUserData) -> id(decode_msg_MetricsMetadataResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeSeriesChunk', Bin, TrUserData) -> id(decode_msg_TimeSeriesChunk(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Chunk', Bin, TrUserData) -> id(decode_msg_Chunk(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TransferChunksResponse', Bin, TrUserData) -> id(decode_msg_TransferChunksResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeSeries', Bin, TrUserData) -> id(decode_msg_TimeSeries(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelPair', Bin, TrUserData) -> id(decode_msg_LabelPair(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Sample', Bin, TrUserData) -> id(decode_msg_Sample(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelMatchers', Bin, TrUserData) -> id(decode_msg_LabelMatchers(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetricMetadata', Bin, TrUserData) -> id(decode_msg_MetricMetadata(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CortexMetric', Bin, TrUserData) -> id(decode_msg_CortexMetric(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LabelMatcher', Bin, TrUserData) -> id(decode_msg_LabelMatcher(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeSeriesFile', Bin, TrUserData) -> id(decode_msg_TimeSeriesFile(Bin, TrUserData), TrUserData).



decode_msg_WriteRequest(Bin, TrUserData) -> dfp_read_field_def_WriteRequest(Bin, 0, 0, id([], TrUserData), id('API', TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_WriteRequest(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_WriteRequest_timeseries(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_WriteRequest(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_WriteRequest_Source(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_WriteRequest(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_WriteRequest_metadata(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_WriteRequest(<<>>, 0, 0, R1, F@_2, R2, TrUserData) -> #'WriteRequest'{timeseries = lists_reverse(R1, TrUserData), 'Source' = F@_2, metadata = lists_reverse(R2, TrUserData)};
dfp_read_field_def_WriteRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_WriteRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_WriteRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_WriteRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_WriteRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_WriteRequest_timeseries(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_WriteRequest_Source(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_WriteRequest_metadata(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_WriteRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_WriteRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_WriteRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_WriteRequest(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_WriteRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_WriteRequest(<<>>, 0, 0, R1, F@_2, R2, TrUserData) -> #'WriteRequest'{timeseries = lists_reverse(R1, TrUserData), 'Source' = F@_2, metadata = lists_reverse(R2, TrUserData)}.

d_field_WriteRequest_timeseries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_WriteRequest_timeseries(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_WriteRequest_timeseries(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeSeries(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_WriteRequest(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_WriteRequest_Source(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_WriteRequest_Source(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_WriteRequest_Source(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_WriteRequest.SourceEnum'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_WriteRequest(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_WriteRequest_metadata(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_WriteRequest_metadata(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_WriteRequest_metadata(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_MetricMetadata(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_WriteRequest(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_WriteRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_WriteRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_WriteRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_WriteRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_WriteRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_WriteRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_WriteRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WriteRequest(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_WriteRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WriteRequest(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_WriteRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_WriteRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_WriteRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_WriteRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_WriteResponse(Bin, TrUserData) -> dfp_read_field_def_WriteResponse(Bin, 0, 0, TrUserData).

dfp_read_field_def_WriteResponse(<<>>, 0, 0, _) -> #'WriteResponse'{};
dfp_read_field_def_WriteResponse(Other, Z1, Z2, TrUserData) -> dg_read_field_def_WriteResponse(Other, Z1, Z2, TrUserData).

dg_read_field_def_WriteResponse(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_WriteResponse(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_WriteResponse(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_WriteResponse(Rest, 0, 0, TrUserData);
        1 -> skip_64_WriteResponse(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_WriteResponse(Rest, 0, 0, TrUserData);
        3 -> skip_group_WriteResponse(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_WriteResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_WriteResponse(<<>>, 0, 0, _) -> #'WriteResponse'{}.

skip_varint_WriteResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_WriteResponse(Rest, Z1, Z2, TrUserData);
skip_varint_WriteResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_WriteResponse(Rest, Z1, Z2, TrUserData).

skip_length_delimited_WriteResponse(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_WriteResponse(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_WriteResponse(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WriteResponse(Rest2, 0, 0, TrUserData).

skip_group_WriteResponse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WriteResponse(Rest, 0, Z2, TrUserData).

skip_32_WriteResponse(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_WriteResponse(Rest, Z1, Z2, TrUserData).

skip_64_WriteResponse(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_WriteResponse(Rest, Z1, Z2, TrUserData).

decode_msg_ReadRequest(Bin, TrUserData) -> dfp_read_field_def_ReadRequest(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_ReadRequest(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ReadRequest_queries(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ReadRequest(<<>>, 0, 0, R1, TrUserData) -> #'ReadRequest'{queries = lists_reverse(R1, TrUserData)};
dfp_read_field_def_ReadRequest(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ReadRequest(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ReadRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReadRequest(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ReadRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ReadRequest_queries(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ReadRequest(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ReadRequest(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ReadRequest(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ReadRequest(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ReadRequest(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReadRequest(<<>>, 0, 0, R1, TrUserData) -> #'ReadRequest'{queries = lists_reverse(R1, TrUserData)}.

d_field_ReadRequest_queries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ReadRequest_queries(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ReadRequest_queries(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_QueryRequest(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ReadRequest(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_ReadRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ReadRequest(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ReadRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ReadRequest(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadRequest(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ReadRequest(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadRequest(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ReadRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ReadRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ReadResponse(Bin, TrUserData) -> dfp_read_field_def_ReadResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_ReadResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ReadResponse_results(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ReadResponse(<<>>, 0, 0, R1, TrUserData) -> #'ReadResponse'{results = lists_reverse(R1, TrUserData)};
dfp_read_field_def_ReadResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ReadResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ReadResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReadResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ReadResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ReadResponse_results(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ReadResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ReadResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ReadResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ReadResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ReadResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReadResponse(<<>>, 0, 0, R1, TrUserData) -> #'ReadResponse'{results = lists_reverse(R1, TrUserData)}.

d_field_ReadResponse_results(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ReadResponse_results(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ReadResponse_results(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_QueryResponse(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ReadResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_ReadResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ReadResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ReadResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ReadResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ReadResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ReadResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ReadResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ReadResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_QueryRequest(Bin, TrUserData) -> dfp_read_field_def_QueryRequest(Bin, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_QueryRequest(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryRequest_start_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryRequest(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryRequest_end_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryRequest(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryRequest_matchers(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryRequest(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'QueryRequest'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, matchers = lists_reverse(R1, TrUserData)};
dfp_read_field_def_QueryRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_QueryRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_QueryRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_QueryRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_QueryRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_QueryRequest_start_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_QueryRequest_end_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_QueryRequest_matchers(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_QueryRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_QueryRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_QueryRequest(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_QueryRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_QueryRequest(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'QueryRequest'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, matchers = lists_reverse(R1, TrUserData)}.

d_field_QueryRequest_start_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryRequest_start_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryRequest_start_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_QueryRequest(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_QueryRequest_end_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryRequest_end_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryRequest_end_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_QueryRequest(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_QueryRequest_matchers(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryRequest_matchers(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryRequest_matchers(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelMatcher(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryRequest(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_QueryRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_QueryRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_QueryRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_QueryRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_QueryRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_QueryRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryRequest(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_QueryRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryRequest(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_QueryRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_QueryRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_QueryResponse(Bin, TrUserData) -> dfp_read_field_def_QueryResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_QueryResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_QueryResponse_timeseries(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_QueryResponse(<<>>, 0, 0, R1, TrUserData) -> #'QueryResponse'{timeseries = lists_reverse(R1, TrUserData)};
dfp_read_field_def_QueryResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_QueryResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_QueryResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_QueryResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_QueryResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_QueryResponse_timeseries(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_QueryResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_QueryResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_QueryResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_QueryResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_QueryResponse(<<>>, 0, 0, R1, TrUserData) -> #'QueryResponse'{timeseries = lists_reverse(R1, TrUserData)}.

d_field_QueryResponse_timeseries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_QueryResponse_timeseries(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_QueryResponse_timeseries(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeSeries(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_QueryResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_QueryResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_QueryResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_QueryResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_QueryResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_QueryResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_QueryResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_QueryResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_QueryResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_QueryResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_QueryResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_QueryResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_QueryStreamResponse(Bin, TrUserData) -> dfp_read_field_def_QueryStreamResponse(Bin, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_QueryStreamResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_QueryStreamResponse_chunkseries(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_QueryStreamResponse(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_QueryStreamResponse_timeseries(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_QueryStreamResponse(<<>>, 0, 0, R1, R2, TrUserData) -> #'QueryStreamResponse'{chunkseries = lists_reverse(R1, TrUserData), timeseries = lists_reverse(R2, TrUserData)};
dfp_read_field_def_QueryStreamResponse(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_QueryStreamResponse(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_QueryStreamResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_QueryStreamResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_QueryStreamResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_QueryStreamResponse_chunkseries(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_QueryStreamResponse_timeseries(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryStreamResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_QueryStreamResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_QueryStreamResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_QueryStreamResponse(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_QueryStreamResponse(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_QueryStreamResponse(<<>>, 0, 0, R1, R2, TrUserData) -> #'QueryStreamResponse'{chunkseries = lists_reverse(R1, TrUserData), timeseries = lists_reverse(R2, TrUserData)}.

d_field_QueryStreamResponse_chunkseries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_QueryStreamResponse_chunkseries(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_QueryStreamResponse_chunkseries(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeSeriesChunk(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryStreamResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_QueryStreamResponse_timeseries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_QueryStreamResponse_timeseries(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_QueryStreamResponse_timeseries(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeSeries(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryStreamResponse(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_QueryStreamResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_QueryStreamResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_QueryStreamResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryStreamResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_QueryStreamResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_QueryStreamResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_QueryStreamResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryStreamResponse(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_QueryStreamResponse(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryStreamResponse(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_QueryStreamResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryStreamResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_QueryStreamResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryStreamResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_LabelValuesRequest(Bin, TrUserData) -> dfp_read_field_def_LabelValuesRequest(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_LabelValuesRequest(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_LabelValuesRequest_label_name(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_LabelValuesRequest(<<>>, 0, 0, F@_1, _) -> #'LabelValuesRequest'{label_name = F@_1};
dfp_read_field_def_LabelValuesRequest(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_LabelValuesRequest(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_LabelValuesRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelValuesRequest(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LabelValuesRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LabelValuesRequest_label_name(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelValuesRequest(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_LabelValuesRequest(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_LabelValuesRequest(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_LabelValuesRequest(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_LabelValuesRequest(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LabelValuesRequest(<<>>, 0, 0, F@_1, _) -> #'LabelValuesRequest'{label_name = F@_1}.

d_field_LabelValuesRequest_label_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_LabelValuesRequest_label_name(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_LabelValuesRequest_label_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LabelValuesRequest(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_LabelValuesRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_LabelValuesRequest(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LabelValuesRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesRequest(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_LabelValuesRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LabelValuesRequest(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LabelValuesRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelValuesRequest(Rest2, 0, 0, F@_1, TrUserData).

skip_group_LabelValuesRequest(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelValuesRequest(Rest, 0, Z2, F@_1, TrUserData).

skip_32_LabelValuesRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesRequest(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_LabelValuesRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesRequest(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_LabelValuesResponse(Bin, TrUserData) -> dfp_read_field_def_LabelValuesResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_LabelValuesResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_LabelValuesResponse_label_values(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_LabelValuesResponse(<<>>, 0, 0, R1, TrUserData) -> #'LabelValuesResponse'{label_values = lists_reverse(R1, TrUserData)};
dfp_read_field_def_LabelValuesResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_LabelValuesResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_LabelValuesResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelValuesResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LabelValuesResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LabelValuesResponse_label_values(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelValuesResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_LabelValuesResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_LabelValuesResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_LabelValuesResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_LabelValuesResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LabelValuesResponse(<<>>, 0, 0, R1, TrUserData) -> #'LabelValuesResponse'{label_values = lists_reverse(R1, TrUserData)}.

d_field_LabelValuesResponse_label_values(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_LabelValuesResponse_label_values(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_LabelValuesResponse_label_values(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LabelValuesResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_LabelValuesResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_LabelValuesResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LabelValuesResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_LabelValuesResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LabelValuesResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LabelValuesResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelValuesResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_LabelValuesResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelValuesResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_LabelValuesResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_LabelValuesResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelValuesResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_LabelNamesRequest(Bin, TrUserData) -> dfp_read_field_def_LabelNamesRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_LabelNamesRequest(<<>>, 0, 0, _) -> #'LabelNamesRequest'{};
dfp_read_field_def_LabelNamesRequest(Other, Z1, Z2, TrUserData) -> dg_read_field_def_LabelNamesRequest(Other, Z1, Z2, TrUserData).

dg_read_field_def_LabelNamesRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelNamesRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_LabelNamesRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_LabelNamesRequest(Rest, 0, 0, TrUserData);
        1 -> skip_64_LabelNamesRequest(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_LabelNamesRequest(Rest, 0, 0, TrUserData);
        3 -> skip_group_LabelNamesRequest(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_LabelNamesRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_LabelNamesRequest(<<>>, 0, 0, _) -> #'LabelNamesRequest'{}.

skip_varint_LabelNamesRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_LabelNamesRequest(Rest, Z1, Z2, TrUserData);
skip_varint_LabelNamesRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_LabelNamesRequest(Rest, Z1, Z2, TrUserData).

skip_length_delimited_LabelNamesRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_LabelNamesRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_LabelNamesRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelNamesRequest(Rest2, 0, 0, TrUserData).

skip_group_LabelNamesRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelNamesRequest(Rest, 0, Z2, TrUserData).

skip_32_LabelNamesRequest(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_LabelNamesRequest(Rest, Z1, Z2, TrUserData).

skip_64_LabelNamesRequest(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_LabelNamesRequest(Rest, Z1, Z2, TrUserData).

decode_msg_LabelNamesResponse(Bin, TrUserData) -> dfp_read_field_def_LabelNamesResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_LabelNamesResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_LabelNamesResponse_label_names(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_LabelNamesResponse(<<>>, 0, 0, R1, TrUserData) -> #'LabelNamesResponse'{label_names = lists_reverse(R1, TrUserData)};
dfp_read_field_def_LabelNamesResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_LabelNamesResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_LabelNamesResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelNamesResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LabelNamesResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LabelNamesResponse_label_names(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelNamesResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_LabelNamesResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_LabelNamesResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_LabelNamesResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_LabelNamesResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LabelNamesResponse(<<>>, 0, 0, R1, TrUserData) -> #'LabelNamesResponse'{label_names = lists_reverse(R1, TrUserData)}.

d_field_LabelNamesResponse_label_names(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_LabelNamesResponse_label_names(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_LabelNamesResponse_label_names(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LabelNamesResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_LabelNamesResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_LabelNamesResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LabelNamesResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelNamesResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_LabelNamesResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LabelNamesResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LabelNamesResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelNamesResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_LabelNamesResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelNamesResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_LabelNamesResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelNamesResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_LabelNamesResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelNamesResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_UserStatsRequest(Bin, TrUserData) -> dfp_read_field_def_UserStatsRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_UserStatsRequest(<<>>, 0, 0, _) -> #'UserStatsRequest'{};
dfp_read_field_def_UserStatsRequest(Other, Z1, Z2, TrUserData) -> dg_read_field_def_UserStatsRequest(Other, Z1, Z2, TrUserData).

dg_read_field_def_UserStatsRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserStatsRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_UserStatsRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_UserStatsRequest(Rest, 0, 0, TrUserData);
        1 -> skip_64_UserStatsRequest(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_UserStatsRequest(Rest, 0, 0, TrUserData);
        3 -> skip_group_UserStatsRequest(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_UserStatsRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_UserStatsRequest(<<>>, 0, 0, _) -> #'UserStatsRequest'{}.

skip_varint_UserStatsRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_UserStatsRequest(Rest, Z1, Z2, TrUserData);
skip_varint_UserStatsRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UserStatsRequest(Rest, Z1, Z2, TrUserData).

skip_length_delimited_UserStatsRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_UserStatsRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_UserStatsRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserStatsRequest(Rest2, 0, 0, TrUserData).

skip_group_UserStatsRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserStatsRequest(Rest, 0, Z2, TrUserData).

skip_32_UserStatsRequest(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UserStatsRequest(Rest, Z1, Z2, TrUserData).

skip_64_UserStatsRequest(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UserStatsRequest(Rest, Z1, Z2, TrUserData).

decode_msg_UserStatsResponse(Bin, TrUserData) -> dfp_read_field_def_UserStatsResponse(Bin, 0, 0, id(0.0, TrUserData), id(0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_UserStatsResponse(<<9, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserStatsResponse_ingestion_rate(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserStatsResponse(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserStatsResponse_num_series(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserStatsResponse(<<25, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserStatsResponse_api_ingestion_rate(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserStatsResponse(<<33, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserStatsResponse_rule_ingestion_rate(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserStatsResponse(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'UserStatsResponse'{ingestion_rate = F@_1, num_series = F@_2, api_ingestion_rate = F@_3, rule_ingestion_rate = F@_4};
dfp_read_field_def_UserStatsResponse(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_UserStatsResponse(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_UserStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_UserStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        9 -> d_field_UserStatsResponse_ingestion_rate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_UserStatsResponse_num_series(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        25 -> d_field_UserStatsResponse_api_ingestion_rate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        33 -> d_field_UserStatsResponse_rule_ingestion_rate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserStatsResponse(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_UserStatsResponse(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_UserStatsResponse(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_UserStatsResponse(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_UserStatsResponse(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_UserStatsResponse(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'UserStatsResponse'{ingestion_rate = F@_1, num_series = F@_2, api_ingestion_rate = F@_3, rule_ingestion_rate = F@_4}.

d_field_UserStatsResponse_ingestion_rate(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_UserStatsResponse_ingestion_rate(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_UserStatsResponse_ingestion_rate(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_UserStatsResponse_ingestion_rate(<<Value:64/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, F@_4, TrUserData).

d_field_UserStatsResponse_num_series(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_UserStatsResponse_num_series(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_UserStatsResponse_num_series(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_UserStatsResponse(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_UserStatsResponse_api_ingestion_rate(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), F@_4, TrUserData);
d_field_UserStatsResponse_api_ingestion_rate(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), F@_4, TrUserData);
d_field_UserStatsResponse_api_ingestion_rate(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), F@_4, TrUserData);
d_field_UserStatsResponse_api_ingestion_rate(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), F@_4, TrUserData).

d_field_UserStatsResponse_rule_ingestion_rate(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(infinity, TrUserData), TrUserData);
d_field_UserStatsResponse_rule_ingestion_rate(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, id('-infinity', TrUserData), TrUserData);
d_field_UserStatsResponse_rule_ingestion_rate(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(nan, TrUserData), TrUserData);
d_field_UserStatsResponse_rule_ingestion_rate(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(Value, TrUserData), TrUserData).

skip_varint_UserStatsResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_UserStatsResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_UserStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_UserStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_UserStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserStatsResponse(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_UserStatsResponse(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserStatsResponse(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_UserStatsResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_UserStatsResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserStatsResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_UserIDStatsResponse(Bin, TrUserData) -> dfp_read_field_def_UserIDStatsResponse(Bin, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UserIDStatsResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_UserIDStatsResponse_user_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_UserIDStatsResponse(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_UserIDStatsResponse_data(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_UserIDStatsResponse(<<>>, 0, 0, F@_1, F@_2, _) -> #'UserIDStatsResponse'{user_id = F@_1, data = F@_2};
dfp_read_field_def_UserIDStatsResponse(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_UserIDStatsResponse(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_UserIDStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserIDStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_UserIDStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UserIDStatsResponse_user_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_UserIDStatsResponse_data(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserIDStatsResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_UserIDStatsResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_UserIDStatsResponse(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_UserIDStatsResponse(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_UserIDStatsResponse(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_UserIDStatsResponse(<<>>, 0, 0, F@_1, F@_2, _) -> #'UserIDStatsResponse'{user_id = F@_1, data = F@_2}.

d_field_UserIDStatsResponse_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UserIDStatsResponse_user_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UserIDStatsResponse_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserIDStatsResponse(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_UserIDStatsResponse_data(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UserIDStatsResponse_data(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UserIDStatsResponse_data(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_UserStatsResponse(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserIDStatsResponse(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           if Prev == undefined -> NewFValue;
                                              true -> merge_msg_UserStatsResponse(Prev, NewFValue, TrUserData)
                                           end,
                                           TrUserData).

skip_varint_UserIDStatsResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_UserIDStatsResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_UserIDStatsResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserIDStatsResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_UserIDStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_UserIDStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_UserIDStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserIDStatsResponse(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_UserIDStatsResponse(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserIDStatsResponse(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_UserIDStatsResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserIDStatsResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_UserIDStatsResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserIDStatsResponse(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_UsersStatsResponse(Bin, TrUserData) -> dfp_read_field_def_UsersStatsResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_UsersStatsResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_UsersStatsResponse_stats(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_UsersStatsResponse(<<>>, 0, 0, R1, TrUserData) -> #'UsersStatsResponse'{stats = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UsersStatsResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_UsersStatsResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_UsersStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_UsersStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_UsersStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UsersStatsResponse_stats(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UsersStatsResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_UsersStatsResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_UsersStatsResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_UsersStatsResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_UsersStatsResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_UsersStatsResponse(<<>>, 0, 0, R1, TrUserData) -> #'UsersStatsResponse'{stats = lists_reverse(R1, TrUserData)}.

d_field_UsersStatsResponse_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_UsersStatsResponse_stats(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_UsersStatsResponse_stats(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_UserIDStatsResponse(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UsersStatsResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UsersStatsResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_UsersStatsResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_UsersStatsResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_UsersStatsResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_UsersStatsResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_UsersStatsResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_UsersStatsResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UsersStatsResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_UsersStatsResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UsersStatsResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_UsersStatsResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_UsersStatsResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_UsersStatsResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_UsersStatsResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_MetricsForLabelMatchersRequest(Bin, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersRequest(Bin, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_MetricsForLabelMatchersRequest(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetricsForLabelMatchersRequest_start_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetricsForLabelMatchersRequest(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetricsForLabelMatchersRequest_end_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetricsForLabelMatchersRequest(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetricsForLabelMatchersRequest_matchers_set(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetricsForLabelMatchersRequest(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'MetricsForLabelMatchersRequest'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, matchers_set = lists_reverse(R1, TrUserData)};
dfp_read_field_def_MetricsForLabelMatchersRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_MetricsForLabelMatchersRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_MetricsForLabelMatchersRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetricsForLabelMatchersRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_MetricsForLabelMatchersRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetricsForLabelMatchersRequest_start_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_MetricsForLabelMatchersRequest_end_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_MetricsForLabelMatchersRequest_matchers_set(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetricsForLabelMatchersRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_MetricsForLabelMatchersRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_MetricsForLabelMatchersRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_MetricsForLabelMatchersRequest(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_MetricsForLabelMatchersRequest(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_MetricsForLabelMatchersRequest(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'MetricsForLabelMatchersRequest'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, matchers_set = lists_reverse(R1, TrUserData)}.

d_field_MetricsForLabelMatchersRequest_start_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    d_field_MetricsForLabelMatchersRequest_start_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_MetricsForLabelMatchersRequest_start_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_MetricsForLabelMatchersRequest(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_MetricsForLabelMatchersRequest_end_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetricsForLabelMatchersRequest_end_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_MetricsForLabelMatchersRequest_end_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_MetricsForLabelMatchersRequest(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_MetricsForLabelMatchersRequest_matchers_set(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetricsForLabelMatchersRequest_matchers_set(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_MetricsForLabelMatchersRequest_matchers_set(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelMatchers(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_MetricsForLabelMatchersRequest(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_MetricsForLabelMatchersRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_MetricsForLabelMatchersRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_MetricsForLabelMatchersRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_MetricsForLabelMatchersRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_MetricsForLabelMatchersRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_MetricsForLabelMatchersRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetricsForLabelMatchersRequest(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_MetricsForLabelMatchersRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetricsForLabelMatchersRequest(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_MetricsForLabelMatchersRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_MetricsForLabelMatchersRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_MetricsForLabelMatchersResponse(Bin, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_MetricsForLabelMatchersResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_MetricsForLabelMatchersResponse_metric(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_MetricsForLabelMatchersResponse(<<>>, 0, 0, R1, TrUserData) -> #'MetricsForLabelMatchersResponse'{metric = lists_reverse(R1, TrUserData)};
dfp_read_field_def_MetricsForLabelMatchersResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_MetricsForLabelMatchersResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_MetricsForLabelMatchersResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetricsForLabelMatchersResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MetricsForLabelMatchersResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_MetricsForLabelMatchersResponse_metric(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetricsForLabelMatchersResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_MetricsForLabelMatchersResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_MetricsForLabelMatchersResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_MetricsForLabelMatchersResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_MetricsForLabelMatchersResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MetricsForLabelMatchersResponse(<<>>, 0, 0, R1, TrUserData) -> #'MetricsForLabelMatchersResponse'{metric = lists_reverse(R1, TrUserData)}.

d_field_MetricsForLabelMatchersResponse_metric(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_MetricsForLabelMatchersResponse_metric(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_MetricsForLabelMatchersResponse_metric(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_CortexMetric(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_MetricsForLabelMatchersResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_MetricsForLabelMatchersResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_MetricsForLabelMatchersResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_MetricsForLabelMatchersResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_MetricsForLabelMatchersResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_MetricsForLabelMatchersResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MetricsForLabelMatchersResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetricsForLabelMatchersResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_MetricsForLabelMatchersResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetricsForLabelMatchersResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_MetricsForLabelMatchersResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_MetricsForLabelMatchersResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsForLabelMatchersResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_MetricsMetadataRequest(Bin, TrUserData) -> dfp_read_field_def_MetricsMetadataRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_MetricsMetadataRequest(<<>>, 0, 0, _) -> #'MetricsMetadataRequest'{};
dfp_read_field_def_MetricsMetadataRequest(Other, Z1, Z2, TrUserData) -> dg_read_field_def_MetricsMetadataRequest(Other, Z1, Z2, TrUserData).

dg_read_field_def_MetricsMetadataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetricsMetadataRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_MetricsMetadataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_MetricsMetadataRequest(Rest, 0, 0, TrUserData);
        1 -> skip_64_MetricsMetadataRequest(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_MetricsMetadataRequest(Rest, 0, 0, TrUserData);
        3 -> skip_group_MetricsMetadataRequest(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_MetricsMetadataRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_MetricsMetadataRequest(<<>>, 0, 0, _) -> #'MetricsMetadataRequest'{}.

skip_varint_MetricsMetadataRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_MetricsMetadataRequest(Rest, Z1, Z2, TrUserData);
skip_varint_MetricsMetadataRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_MetricsMetadataRequest(Rest, Z1, Z2, TrUserData).

skip_length_delimited_MetricsMetadataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_MetricsMetadataRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_MetricsMetadataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetricsMetadataRequest(Rest2, 0, 0, TrUserData).

skip_group_MetricsMetadataRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetricsMetadataRequest(Rest, 0, Z2, TrUserData).

skip_32_MetricsMetadataRequest(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_MetricsMetadataRequest(Rest, Z1, Z2, TrUserData).

skip_64_MetricsMetadataRequest(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_MetricsMetadataRequest(Rest, Z1, Z2, TrUserData).

decode_msg_MetricsMetadataResponse(Bin, TrUserData) -> dfp_read_field_def_MetricsMetadataResponse(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_MetricsMetadataResponse(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_MetricsMetadataResponse_metadata(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_MetricsMetadataResponse(<<>>, 0, 0, R1, TrUserData) -> #'MetricsMetadataResponse'{metadata = lists_reverse(R1, TrUserData)};
dfp_read_field_def_MetricsMetadataResponse(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_MetricsMetadataResponse(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_MetricsMetadataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetricsMetadataResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_MetricsMetadataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_MetricsMetadataResponse_metadata(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetricsMetadataResponse(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_MetricsMetadataResponse(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_MetricsMetadataResponse(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_MetricsMetadataResponse(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_MetricsMetadataResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MetricsMetadataResponse(<<>>, 0, 0, R1, TrUserData) -> #'MetricsMetadataResponse'{metadata = lists_reverse(R1, TrUserData)}.

d_field_MetricsMetadataResponse_metadata(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_MetricsMetadataResponse_metadata(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_MetricsMetadataResponse_metadata(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_MetricMetadata(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_MetricsMetadataResponse(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_MetricsMetadataResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_MetricsMetadataResponse(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_MetricsMetadataResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsMetadataResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_MetricsMetadataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_MetricsMetadataResponse(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_MetricsMetadataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetricsMetadataResponse(Rest2, 0, 0, F@_1, TrUserData).

skip_group_MetricsMetadataResponse(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetricsMetadataResponse(Rest, 0, Z2, F@_1, TrUserData).

skip_32_MetricsMetadataResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsMetadataResponse(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_MetricsMetadataResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_MetricsMetadataResponse(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_TimeSeriesChunk(Bin, TrUserData) -> dfp_read_field_def_TimeSeriesChunk(Bin, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_TimeSeriesChunk(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesChunk_from_ingester_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesChunk(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesChunk_user_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesChunk(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesChunk_labels(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesChunk(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesChunk_chunks(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesChunk(<<>>, 0, 0, F@_1, F@_2, R1, R2, TrUserData) -> #'TimeSeriesChunk'{from_ingester_id = F@_1, user_id = F@_2, labels = lists_reverse(R1, TrUserData), chunks = lists_reverse(R2, TrUserData)};
dfp_read_field_def_TimeSeriesChunk(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_TimeSeriesChunk(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_TimeSeriesChunk(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeSeriesChunk(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_TimeSeriesChunk(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeSeriesChunk_from_ingester_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_TimeSeriesChunk_user_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_TimeSeriesChunk_labels(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_TimeSeriesChunk_chunks(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeSeriesChunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_TimeSeriesChunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_TimeSeriesChunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_TimeSeriesChunk(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_TimeSeriesChunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_TimeSeriesChunk(<<>>, 0, 0, F@_1, F@_2, R1, R2, TrUserData) -> #'TimeSeriesChunk'{from_ingester_id = F@_1, user_id = F@_2, labels = lists_reverse(R1, TrUserData), chunks = lists_reverse(R2, TrUserData)}.

d_field_TimeSeriesChunk_from_ingester_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesChunk_from_ingester_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesChunk_from_ingester_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesChunk(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_TimeSeriesChunk_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesChunk_user_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesChunk_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesChunk(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_TimeSeriesChunk_labels(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesChunk_labels(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesChunk_labels(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelPair(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesChunk(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_TimeSeriesChunk_chunks(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesChunk_chunks(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesChunk_chunks(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Chunk(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesChunk(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_TimeSeriesChunk(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_TimeSeriesChunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_TimeSeriesChunk(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesChunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_TimeSeriesChunk(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_TimeSeriesChunk(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_TimeSeriesChunk(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeSeriesChunk(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_TimeSeriesChunk(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeSeriesChunk(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_TimeSeriesChunk(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesChunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_TimeSeriesChunk(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesChunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_Chunk(Bin, TrUserData) -> dfp_read_field_def_Chunk(Bin, 0, 0, id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Chunk(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Chunk_start_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Chunk(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Chunk_end_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Chunk(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Chunk_encoding(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Chunk(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Chunk_data(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Chunk(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'Chunk'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, encoding = F@_3, data = F@_4};
dfp_read_field_def_Chunk(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_Chunk(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Chunk(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_Chunk(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Chunk(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Chunk_start_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_Chunk_end_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_Chunk_encoding(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_Chunk_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Chunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_Chunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_Chunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_Chunk(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_Chunk(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_Chunk(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'Chunk'{start_timestamp_ms = F@_1, end_timestamp_ms = F@_2, encoding = F@_3, data = F@_4}.

d_field_Chunk_start_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Chunk_start_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Chunk_start_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Chunk(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_Chunk_end_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Chunk_end_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Chunk_end_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Chunk(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_Chunk_encoding(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Chunk_encoding(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Chunk_encoding(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Chunk(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_Chunk_data(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Chunk_data(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Chunk_data(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_Chunk(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_Chunk(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_Chunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_Chunk(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Chunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Chunk(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_Chunk(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Chunk(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Chunk(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_Chunk(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Chunk(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_Chunk(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Chunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_Chunk(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Chunk(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_TransferChunksResponse(Bin, TrUserData) -> dfp_read_field_def_TransferChunksResponse(Bin, 0, 0, TrUserData).

dfp_read_field_def_TransferChunksResponse(<<>>, 0, 0, _) -> #'TransferChunksResponse'{};
dfp_read_field_def_TransferChunksResponse(Other, Z1, Z2, TrUserData) -> dg_read_field_def_TransferChunksResponse(Other, Z1, Z2, TrUserData).

dg_read_field_def_TransferChunksResponse(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_TransferChunksResponse(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_TransferChunksResponse(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_TransferChunksResponse(Rest, 0, 0, TrUserData);
        1 -> skip_64_TransferChunksResponse(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_TransferChunksResponse(Rest, 0, 0, TrUserData);
        3 -> skip_group_TransferChunksResponse(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_TransferChunksResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_TransferChunksResponse(<<>>, 0, 0, _) -> #'TransferChunksResponse'{}.

skip_varint_TransferChunksResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_TransferChunksResponse(Rest, Z1, Z2, TrUserData);
skip_varint_TransferChunksResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_TransferChunksResponse(Rest, Z1, Z2, TrUserData).

skip_length_delimited_TransferChunksResponse(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_TransferChunksResponse(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_TransferChunksResponse(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TransferChunksResponse(Rest2, 0, 0, TrUserData).

skip_group_TransferChunksResponse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TransferChunksResponse(Rest, 0, Z2, TrUserData).

skip_32_TransferChunksResponse(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_TransferChunksResponse(Rest, Z1, Z2, TrUserData).

skip_64_TransferChunksResponse(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_TransferChunksResponse(Rest, Z1, Z2, TrUserData).

decode_msg_TimeSeries(Bin, TrUserData) -> dfp_read_field_def_TimeSeries(Bin, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_TimeSeries(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_TimeSeries_labels(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_TimeSeries(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_TimeSeries_samples(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_TimeSeries(<<>>, 0, 0, R1, R2, TrUserData) -> #'TimeSeries'{labels = lists_reverse(R1, TrUserData), samples = lists_reverse(R2, TrUserData)};
dfp_read_field_def_TimeSeries(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_TimeSeries(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_TimeSeries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeSeries(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_TimeSeries(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeSeries_labels(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_TimeSeries_samples(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeSeries(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_TimeSeries(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_TimeSeries(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_TimeSeries(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_TimeSeries(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_TimeSeries(<<>>, 0, 0, R1, R2, TrUserData) -> #'TimeSeries'{labels = lists_reverse(R1, TrUserData), samples = lists_reverse(R2, TrUserData)}.

d_field_TimeSeries_labels(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_TimeSeries_labels(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_TimeSeries_labels(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelPair(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeries(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_TimeSeries_samples(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_TimeSeries_samples(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_TimeSeries_samples(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Sample(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeries(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_TimeSeries(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_TimeSeries(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_TimeSeries(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TimeSeries(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_TimeSeries(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_TimeSeries(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_TimeSeries(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeSeries(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_TimeSeries(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeSeries(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_TimeSeries(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TimeSeries(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_TimeSeries(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TimeSeries(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_LabelPair(Bin, TrUserData) -> dfp_read_field_def_LabelPair(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_LabelPair(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_LabelPair_name(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_LabelPair(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_LabelPair_value(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_LabelPair(<<>>, 0, 0, F@_1, F@_2, _) -> #'LabelPair'{name = F@_1, value = F@_2};
dfp_read_field_def_LabelPair(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_LabelPair(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_LabelPair(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelPair(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LabelPair(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LabelPair_name(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_LabelPair_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelPair(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_LabelPair(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_LabelPair(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_LabelPair(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_LabelPair(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_LabelPair(<<>>, 0, 0, F@_1, F@_2, _) -> #'LabelPair'{name = F@_1, value = F@_2}.

d_field_LabelPair_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_LabelPair_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LabelPair_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_LabelPair(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_LabelPair_value(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_LabelPair_value(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LabelPair_value(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_LabelPair(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_LabelPair(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_LabelPair(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_LabelPair(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LabelPair(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_LabelPair(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_LabelPair(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LabelPair(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelPair(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_LabelPair(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelPair(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_LabelPair(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LabelPair(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_LabelPair(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_LabelPair(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_Sample(Bin, TrUserData) -> dfp_read_field_def_Sample(Bin, 0, 0, id(0.0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Sample(<<9, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_Sample_value(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_Sample(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_Sample_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_Sample(<<>>, 0, 0, F@_1, F@_2, _) -> #'Sample'{value = F@_1, timestamp_ms = F@_2};
dfp_read_field_def_Sample(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_Sample(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_Sample(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Sample(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_Sample(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        9 -> d_field_Sample_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_Sample_timestamp_ms(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Sample(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_Sample(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Sample(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_Sample(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_Sample(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Sample(<<>>, 0, 0, F@_1, F@_2, _) -> #'Sample'{value = F@_1, timestamp_ms = F@_2}.

d_field_Sample_value(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, _, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, TrUserData);
d_field_Sample_value(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, _, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, TrUserData);
d_field_Sample_value(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, id(nan, TrUserData), F@_2, TrUserData);
d_field_Sample_value(<<Value:64/little-float, Rest/binary>>, Z1, Z2, _, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, id(Value, TrUserData), F@_2, TrUserData).

d_field_Sample_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Sample_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Sample_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Sample(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_Sample(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_Sample(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Sample(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_Sample(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Sample(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Sample(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Sample(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_Sample(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Sample(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_Sample(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_Sample(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Sample(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_LabelMatchers(Bin, TrUserData) -> dfp_read_field_def_LabelMatchers(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_LabelMatchers(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_LabelMatchers_matchers(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_LabelMatchers(<<>>, 0, 0, R1, TrUserData) -> #'LabelMatchers'{matchers = lists_reverse(R1, TrUserData)};
dfp_read_field_def_LabelMatchers(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_LabelMatchers(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_LabelMatchers(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelMatchers(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LabelMatchers(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LabelMatchers_matchers(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelMatchers(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_LabelMatchers(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_LabelMatchers(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_LabelMatchers(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_LabelMatchers(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_LabelMatchers(<<>>, 0, 0, R1, TrUserData) -> #'LabelMatchers'{matchers = lists_reverse(R1, TrUserData)}.

d_field_LabelMatchers_matchers(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_LabelMatchers_matchers(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_LabelMatchers_matchers(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelMatcher(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_LabelMatchers(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_LabelMatchers(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_LabelMatchers(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LabelMatchers(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelMatchers(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_LabelMatchers(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_LabelMatchers(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LabelMatchers(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelMatchers(Rest2, 0, 0, F@_1, TrUserData).

skip_group_LabelMatchers(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelMatchers(Rest, 0, Z2, F@_1, TrUserData).

skip_32_LabelMatchers(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelMatchers(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_LabelMatchers(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_LabelMatchers(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_MetricMetadata(Bin, TrUserData) -> dfp_read_field_def_MetricMetadata(Bin, 0, 0, id('UNKNOWN', TrUserData), id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_MetricMetadata(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_MetricMetadata_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MetricMetadata(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_MetricMetadata_metric_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MetricMetadata(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_MetricMetadata_help(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MetricMetadata(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_MetricMetadata_unit(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MetricMetadata(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'MetricMetadata'{type = F@_1, metric_name = F@_2, help = F@_3, unit = F@_4};
dfp_read_field_def_MetricMetadata(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_MetricMetadata(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_MetricMetadata(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetricMetadata(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_MetricMetadata(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetricMetadata_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_MetricMetadata_metric_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_MetricMetadata_help(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        42 -> d_field_MetricMetadata_unit(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetricMetadata(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_MetricMetadata(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_MetricMetadata(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_MetricMetadata(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_MetricMetadata(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_MetricMetadata(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'MetricMetadata'{type = F@_1, metric_name = F@_2, help = F@_3, unit = F@_4}.

d_field_MetricMetadata_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_MetricMetadata_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_MetricMetadata_type(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_MetricMetadata.MetricType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetricMetadata(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_MetricMetadata_metric_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_MetricMetadata_metric_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_MetricMetadata_metric_name(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetricMetadata(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_MetricMetadata_help(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_MetricMetadata_help(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_MetricMetadata_help(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetricMetadata(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_MetricMetadata_unit(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_MetricMetadata_unit(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_MetricMetadata_unit(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetricMetadata(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_MetricMetadata(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_MetricMetadata(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_MetricMetadata(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_MetricMetadata(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_MetricMetadata(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_MetricMetadata(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_MetricMetadata(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetricMetadata(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_MetricMetadata(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetricMetadata(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_MetricMetadata(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_MetricMetadata(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_MetricMetadata(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_MetricMetadata(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_CortexMetric(Bin, TrUserData) -> dfp_read_field_def_CortexMetric(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_CortexMetric(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_CortexMetric_labels(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_CortexMetric(<<>>, 0, 0, R1, TrUserData) -> #'CortexMetric'{labels = lists_reverse(R1, TrUserData)};
dfp_read_field_def_CortexMetric(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_CortexMetric(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_CortexMetric(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_CortexMetric(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_CortexMetric(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_CortexMetric_labels(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CortexMetric(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_CortexMetric(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_CortexMetric(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_CortexMetric(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_CortexMetric(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_CortexMetric(<<>>, 0, 0, R1, TrUserData) -> #'CortexMetric'{labels = lists_reverse(R1, TrUserData)}.

d_field_CortexMetric_labels(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_CortexMetric_labels(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_CortexMetric_labels(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LabelPair(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_CortexMetric(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_CortexMetric(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_CortexMetric(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_CortexMetric(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CortexMetric(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_CortexMetric(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_CortexMetric(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CortexMetric(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CortexMetric(Rest2, 0, 0, F@_1, TrUserData).

skip_group_CortexMetric(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CortexMetric(Rest, 0, Z2, F@_1, TrUserData).

skip_32_CortexMetric(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CortexMetric(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_CortexMetric(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CortexMetric(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_LabelMatcher(Bin, TrUserData) -> dfp_read_field_def_LabelMatcher(Bin, 0, 0, id('EQUAL', TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_LabelMatcher(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_LabelMatcher_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LabelMatcher(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_LabelMatcher_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LabelMatcher(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_LabelMatcher_value(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LabelMatcher(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'LabelMatcher'{type = F@_1, name = F@_2, value = F@_3};
dfp_read_field_def_LabelMatcher(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_LabelMatcher(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_LabelMatcher(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_LabelMatcher(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_LabelMatcher(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_LabelMatcher_type(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_LabelMatcher_name(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_LabelMatcher_value(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LabelMatcher(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_LabelMatcher(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_LabelMatcher(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_LabelMatcher(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_LabelMatcher(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_LabelMatcher(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'LabelMatcher'{type = F@_1, name = F@_2, value = F@_3}.

d_field_LabelMatcher_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LabelMatcher_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LabelMatcher_type(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MatchType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_LabelMatcher(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_LabelMatcher_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LabelMatcher_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LabelMatcher_name(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LabelMatcher(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_LabelMatcher_value(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LabelMatcher_value(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LabelMatcher_value(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LabelMatcher(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_LabelMatcher(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_LabelMatcher(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_LabelMatcher(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LabelMatcher(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_LabelMatcher(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_LabelMatcher(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_LabelMatcher(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LabelMatcher(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_LabelMatcher(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LabelMatcher(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_LabelMatcher(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LabelMatcher(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_LabelMatcher(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LabelMatcher(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_TimeSeriesFile(Bin, TrUserData) -> dfp_read_field_def_TimeSeriesFile(Bin, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TimeSeriesFile(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesFile_from_ingester_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesFile(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesFile_user_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesFile(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesFile_filename(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesFile(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeSeriesFile_data(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeSeriesFile(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'TimeSeriesFile'{from_ingester_id = F@_1, user_id = F@_2, filename = F@_3, data = F@_4};
dfp_read_field_def_TimeSeriesFile(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_TimeSeriesFile(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_TimeSeriesFile(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeSeriesFile(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_TimeSeriesFile(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeSeriesFile_from_ingester_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_TimeSeriesFile_user_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_TimeSeriesFile_filename(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_TimeSeriesFile_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeSeriesFile(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_TimeSeriesFile(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_TimeSeriesFile(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_TimeSeriesFile(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_TimeSeriesFile(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_TimeSeriesFile(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'TimeSeriesFile'{from_ingester_id = F@_1, user_id = F@_2, filename = F@_3, data = F@_4}.

d_field_TimeSeriesFile_from_ingester_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesFile_from_ingester_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesFile_from_ingester_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesFile(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_TimeSeriesFile_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesFile_user_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesFile_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesFile(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_TimeSeriesFile_filename(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesFile_filename(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesFile_filename(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesFile(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_TimeSeriesFile_data(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeSeriesFile_data(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeSeriesFile_data(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_TimeSeriesFile(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_TimeSeriesFile(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_TimeSeriesFile(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_TimeSeriesFile(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesFile(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_TimeSeriesFile(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_TimeSeriesFile(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_TimeSeriesFile(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeSeriesFile(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_TimeSeriesFile(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeSeriesFile(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_TimeSeriesFile(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesFile(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_TimeSeriesFile(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeSeriesFile(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_WriteRequest.SourceEnum'(0) -> 'API';
'd_enum_WriteRequest.SourceEnum'(1) -> 'RULE';
'd_enum_WriteRequest.SourceEnum'(V) -> V.

'd_enum_MetricMetadata.MetricType'(0) -> 'UNKNOWN';
'd_enum_MetricMetadata.MetricType'(1) -> 'COUNTER';
'd_enum_MetricMetadata.MetricType'(2) -> 'GAUGE';
'd_enum_MetricMetadata.MetricType'(3) -> 'HISTOGRAM';
'd_enum_MetricMetadata.MetricType'(4) -> 'GAUGEHISTOGRAM';
'd_enum_MetricMetadata.MetricType'(5) -> 'SUMMARY';
'd_enum_MetricMetadata.MetricType'(6) -> 'INFO';
'd_enum_MetricMetadata.MetricType'(7) -> 'STATESET';
'd_enum_MetricMetadata.MetricType'(V) -> V.

d_enum_MatchType(0) -> 'EQUAL';
d_enum_MatchType(1) -> 'NOT_EQUAL';
d_enum_MatchType(2) -> 'REGEX_MATCH';
d_enum_MatchType(3) -> 'REGEX_NO_MATCH';
d_enum_MatchType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'WriteRequest' -> merge_msg_WriteRequest(Prev, New, TrUserData);
        'WriteResponse' -> merge_msg_WriteResponse(Prev, New, TrUserData);
        'ReadRequest' -> merge_msg_ReadRequest(Prev, New, TrUserData);
        'ReadResponse' -> merge_msg_ReadResponse(Prev, New, TrUserData);
        'QueryRequest' -> merge_msg_QueryRequest(Prev, New, TrUserData);
        'QueryResponse' -> merge_msg_QueryResponse(Prev, New, TrUserData);
        'QueryStreamResponse' -> merge_msg_QueryStreamResponse(Prev, New, TrUserData);
        'LabelValuesRequest' -> merge_msg_LabelValuesRequest(Prev, New, TrUserData);
        'LabelValuesResponse' -> merge_msg_LabelValuesResponse(Prev, New, TrUserData);
        'LabelNamesRequest' -> merge_msg_LabelNamesRequest(Prev, New, TrUserData);
        'LabelNamesResponse' -> merge_msg_LabelNamesResponse(Prev, New, TrUserData);
        'UserStatsRequest' -> merge_msg_UserStatsRequest(Prev, New, TrUserData);
        'UserStatsResponse' -> merge_msg_UserStatsResponse(Prev, New, TrUserData);
        'UserIDStatsResponse' -> merge_msg_UserIDStatsResponse(Prev, New, TrUserData);
        'UsersStatsResponse' -> merge_msg_UsersStatsResponse(Prev, New, TrUserData);
        'MetricsForLabelMatchersRequest' -> merge_msg_MetricsForLabelMatchersRequest(Prev, New, TrUserData);
        'MetricsForLabelMatchersResponse' -> merge_msg_MetricsForLabelMatchersResponse(Prev, New, TrUserData);
        'MetricsMetadataRequest' -> merge_msg_MetricsMetadataRequest(Prev, New, TrUserData);
        'MetricsMetadataResponse' -> merge_msg_MetricsMetadataResponse(Prev, New, TrUserData);
        'TimeSeriesChunk' -> merge_msg_TimeSeriesChunk(Prev, New, TrUserData);
        'Chunk' -> merge_msg_Chunk(Prev, New, TrUserData);
        'TransferChunksResponse' -> merge_msg_TransferChunksResponse(Prev, New, TrUserData);
        'TimeSeries' -> merge_msg_TimeSeries(Prev, New, TrUserData);
        'LabelPair' -> merge_msg_LabelPair(Prev, New, TrUserData);
        'Sample' -> merge_msg_Sample(Prev, New, TrUserData);
        'LabelMatchers' -> merge_msg_LabelMatchers(Prev, New, TrUserData);
        'MetricMetadata' -> merge_msg_MetricMetadata(Prev, New, TrUserData);
        'CortexMetric' -> merge_msg_CortexMetric(Prev, New, TrUserData);
        'LabelMatcher' -> merge_msg_LabelMatcher(Prev, New, TrUserData);
        'TimeSeriesFile' -> merge_msg_TimeSeriesFile(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_WriteRequest/3}).
merge_msg_WriteRequest(#'WriteRequest'{timeseries = PFtimeseries, 'Source' = PFSource, metadata = PFmetadata}, #'WriteRequest'{timeseries = NFtimeseries, 'Source' = NFSource, metadata = NFmetadata}, TrUserData) ->
    #'WriteRequest'{timeseries =
                        if PFtimeseries /= undefined, NFtimeseries /= undefined -> 'erlang_++'(PFtimeseries, NFtimeseries, TrUserData);
                           PFtimeseries == undefined -> NFtimeseries;
                           NFtimeseries == undefined -> PFtimeseries
                        end,
                    'Source' =
                        if NFSource =:= undefined -> PFSource;
                           true -> NFSource
                        end,
                    metadata =
                        if PFmetadata /= undefined, NFmetadata /= undefined -> 'erlang_++'(PFmetadata, NFmetadata, TrUserData);
                           PFmetadata == undefined -> NFmetadata;
                           NFmetadata == undefined -> PFmetadata
                        end}.

-compile({nowarn_unused_function,merge_msg_WriteResponse/3}).
merge_msg_WriteResponse(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ReadRequest/3}).
merge_msg_ReadRequest(#'ReadRequest'{queries = PFqueries}, #'ReadRequest'{queries = NFqueries}, TrUserData) ->
    #'ReadRequest'{queries =
                       if PFqueries /= undefined, NFqueries /= undefined -> 'erlang_++'(PFqueries, NFqueries, TrUserData);
                          PFqueries == undefined -> NFqueries;
                          NFqueries == undefined -> PFqueries
                       end}.

-compile({nowarn_unused_function,merge_msg_ReadResponse/3}).
merge_msg_ReadResponse(#'ReadResponse'{results = PFresults}, #'ReadResponse'{results = NFresults}, TrUserData) ->
    #'ReadResponse'{results =
                        if PFresults /= undefined, NFresults /= undefined -> 'erlang_++'(PFresults, NFresults, TrUserData);
                           PFresults == undefined -> NFresults;
                           NFresults == undefined -> PFresults
                        end}.

-compile({nowarn_unused_function,merge_msg_QueryRequest/3}).
merge_msg_QueryRequest(#'QueryRequest'{start_timestamp_ms = PFstart_timestamp_ms, end_timestamp_ms = PFend_timestamp_ms, matchers = PFmatchers},
                       #'QueryRequest'{start_timestamp_ms = NFstart_timestamp_ms, end_timestamp_ms = NFend_timestamp_ms, matchers = NFmatchers}, TrUserData) ->
    #'QueryRequest'{start_timestamp_ms =
                        if NFstart_timestamp_ms =:= undefined -> PFstart_timestamp_ms;
                           true -> NFstart_timestamp_ms
                        end,
                    end_timestamp_ms =
                        if NFend_timestamp_ms =:= undefined -> PFend_timestamp_ms;
                           true -> NFend_timestamp_ms
                        end,
                    matchers =
                        if PFmatchers /= undefined, NFmatchers /= undefined -> 'erlang_++'(PFmatchers, NFmatchers, TrUserData);
                           PFmatchers == undefined -> NFmatchers;
                           NFmatchers == undefined -> PFmatchers
                        end}.

-compile({nowarn_unused_function,merge_msg_QueryResponse/3}).
merge_msg_QueryResponse(#'QueryResponse'{timeseries = PFtimeseries}, #'QueryResponse'{timeseries = NFtimeseries}, TrUserData) ->
    #'QueryResponse'{timeseries =
                         if PFtimeseries /= undefined, NFtimeseries /= undefined -> 'erlang_++'(PFtimeseries, NFtimeseries, TrUserData);
                            PFtimeseries == undefined -> NFtimeseries;
                            NFtimeseries == undefined -> PFtimeseries
                         end}.

-compile({nowarn_unused_function,merge_msg_QueryStreamResponse/3}).
merge_msg_QueryStreamResponse(#'QueryStreamResponse'{chunkseries = PFchunkseries, timeseries = PFtimeseries}, #'QueryStreamResponse'{chunkseries = NFchunkseries, timeseries = NFtimeseries}, TrUserData) ->
    #'QueryStreamResponse'{chunkseries =
                               if PFchunkseries /= undefined, NFchunkseries /= undefined -> 'erlang_++'(PFchunkseries, NFchunkseries, TrUserData);
                                  PFchunkseries == undefined -> NFchunkseries;
                                  NFchunkseries == undefined -> PFchunkseries
                               end,
                           timeseries =
                               if PFtimeseries /= undefined, NFtimeseries /= undefined -> 'erlang_++'(PFtimeseries, NFtimeseries, TrUserData);
                                  PFtimeseries == undefined -> NFtimeseries;
                                  NFtimeseries == undefined -> PFtimeseries
                               end}.

-compile({nowarn_unused_function,merge_msg_LabelValuesRequest/3}).
merge_msg_LabelValuesRequest(#'LabelValuesRequest'{label_name = PFlabel_name}, #'LabelValuesRequest'{label_name = NFlabel_name}, _) ->
    #'LabelValuesRequest'{label_name =
                              if NFlabel_name =:= undefined -> PFlabel_name;
                                 true -> NFlabel_name
                              end}.

-compile({nowarn_unused_function,merge_msg_LabelValuesResponse/3}).
merge_msg_LabelValuesResponse(#'LabelValuesResponse'{label_values = PFlabel_values}, #'LabelValuesResponse'{label_values = NFlabel_values}, TrUserData) ->
    #'LabelValuesResponse'{label_values =
                               if PFlabel_values /= undefined, NFlabel_values /= undefined -> 'erlang_++'(PFlabel_values, NFlabel_values, TrUserData);
                                  PFlabel_values == undefined -> NFlabel_values;
                                  NFlabel_values == undefined -> PFlabel_values
                               end}.

-compile({nowarn_unused_function,merge_msg_LabelNamesRequest/3}).
merge_msg_LabelNamesRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_LabelNamesResponse/3}).
merge_msg_LabelNamesResponse(#'LabelNamesResponse'{label_names = PFlabel_names}, #'LabelNamesResponse'{label_names = NFlabel_names}, TrUserData) ->
    #'LabelNamesResponse'{label_names =
                              if PFlabel_names /= undefined, NFlabel_names /= undefined -> 'erlang_++'(PFlabel_names, NFlabel_names, TrUserData);
                                 PFlabel_names == undefined -> NFlabel_names;
                                 NFlabel_names == undefined -> PFlabel_names
                              end}.

-compile({nowarn_unused_function,merge_msg_UserStatsRequest/3}).
merge_msg_UserStatsRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_UserStatsResponse/3}).
merge_msg_UserStatsResponse(#'UserStatsResponse'{ingestion_rate = PFingestion_rate, num_series = PFnum_series, api_ingestion_rate = PFapi_ingestion_rate, rule_ingestion_rate = PFrule_ingestion_rate},
                            #'UserStatsResponse'{ingestion_rate = NFingestion_rate, num_series = NFnum_series, api_ingestion_rate = NFapi_ingestion_rate, rule_ingestion_rate = NFrule_ingestion_rate}, _) ->
    #'UserStatsResponse'{ingestion_rate =
                             if NFingestion_rate =:= undefined -> PFingestion_rate;
                                true -> NFingestion_rate
                             end,
                         num_series =
                             if NFnum_series =:= undefined -> PFnum_series;
                                true -> NFnum_series
                             end,
                         api_ingestion_rate =
                             if NFapi_ingestion_rate =:= undefined -> PFapi_ingestion_rate;
                                true -> NFapi_ingestion_rate
                             end,
                         rule_ingestion_rate =
                             if NFrule_ingestion_rate =:= undefined -> PFrule_ingestion_rate;
                                true -> NFrule_ingestion_rate
                             end}.

-compile({nowarn_unused_function,merge_msg_UserIDStatsResponse/3}).
merge_msg_UserIDStatsResponse(#'UserIDStatsResponse'{user_id = PFuser_id, data = PFdata}, #'UserIDStatsResponse'{user_id = NFuser_id, data = NFdata}, TrUserData) ->
    #'UserIDStatsResponse'{user_id =
                               if NFuser_id =:= undefined -> PFuser_id;
                                  true -> NFuser_id
                               end,
                           data =
                               if PFdata /= undefined, NFdata /= undefined -> merge_msg_UserStatsResponse(PFdata, NFdata, TrUserData);
                                  PFdata == undefined -> NFdata;
                                  NFdata == undefined -> PFdata
                               end}.

-compile({nowarn_unused_function,merge_msg_UsersStatsResponse/3}).
merge_msg_UsersStatsResponse(#'UsersStatsResponse'{stats = PFstats}, #'UsersStatsResponse'{stats = NFstats}, TrUserData) ->
    #'UsersStatsResponse'{stats =
                              if PFstats /= undefined, NFstats /= undefined -> 'erlang_++'(PFstats, NFstats, TrUserData);
                                 PFstats == undefined -> NFstats;
                                 NFstats == undefined -> PFstats
                              end}.

-compile({nowarn_unused_function,merge_msg_MetricsForLabelMatchersRequest/3}).
merge_msg_MetricsForLabelMatchersRequest(#'MetricsForLabelMatchersRequest'{start_timestamp_ms = PFstart_timestamp_ms, end_timestamp_ms = PFend_timestamp_ms, matchers_set = PFmatchers_set},
                                         #'MetricsForLabelMatchersRequest'{start_timestamp_ms = NFstart_timestamp_ms, end_timestamp_ms = NFend_timestamp_ms, matchers_set = NFmatchers_set}, TrUserData) ->
    #'MetricsForLabelMatchersRequest'{start_timestamp_ms =
                                          if NFstart_timestamp_ms =:= undefined -> PFstart_timestamp_ms;
                                             true -> NFstart_timestamp_ms
                                          end,
                                      end_timestamp_ms =
                                          if NFend_timestamp_ms =:= undefined -> PFend_timestamp_ms;
                                             true -> NFend_timestamp_ms
                                          end,
                                      matchers_set =
                                          if PFmatchers_set /= undefined, NFmatchers_set /= undefined -> 'erlang_++'(PFmatchers_set, NFmatchers_set, TrUserData);
                                             PFmatchers_set == undefined -> NFmatchers_set;
                                             NFmatchers_set == undefined -> PFmatchers_set
                                          end}.

-compile({nowarn_unused_function,merge_msg_MetricsForLabelMatchersResponse/3}).
merge_msg_MetricsForLabelMatchersResponse(#'MetricsForLabelMatchersResponse'{metric = PFmetric}, #'MetricsForLabelMatchersResponse'{metric = NFmetric}, TrUserData) ->
    #'MetricsForLabelMatchersResponse'{metric =
                                           if PFmetric /= undefined, NFmetric /= undefined -> 'erlang_++'(PFmetric, NFmetric, TrUserData);
                                              PFmetric == undefined -> NFmetric;
                                              NFmetric == undefined -> PFmetric
                                           end}.

-compile({nowarn_unused_function,merge_msg_MetricsMetadataRequest/3}).
merge_msg_MetricsMetadataRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_MetricsMetadataResponse/3}).
merge_msg_MetricsMetadataResponse(#'MetricsMetadataResponse'{metadata = PFmetadata}, #'MetricsMetadataResponse'{metadata = NFmetadata}, TrUserData) ->
    #'MetricsMetadataResponse'{metadata =
                                   if PFmetadata /= undefined, NFmetadata /= undefined -> 'erlang_++'(PFmetadata, NFmetadata, TrUserData);
                                      PFmetadata == undefined -> NFmetadata;
                                      NFmetadata == undefined -> PFmetadata
                                   end}.

-compile({nowarn_unused_function,merge_msg_TimeSeriesChunk/3}).
merge_msg_TimeSeriesChunk(#'TimeSeriesChunk'{from_ingester_id = PFfrom_ingester_id, user_id = PFuser_id, labels = PFlabels, chunks = PFchunks},
                          #'TimeSeriesChunk'{from_ingester_id = NFfrom_ingester_id, user_id = NFuser_id, labels = NFlabels, chunks = NFchunks}, TrUserData) ->
    #'TimeSeriesChunk'{from_ingester_id =
                           if NFfrom_ingester_id =:= undefined -> PFfrom_ingester_id;
                              true -> NFfrom_ingester_id
                           end,
                       user_id =
                           if NFuser_id =:= undefined -> PFuser_id;
                              true -> NFuser_id
                           end,
                       labels =
                           if PFlabels /= undefined, NFlabels /= undefined -> 'erlang_++'(PFlabels, NFlabels, TrUserData);
                              PFlabels == undefined -> NFlabels;
                              NFlabels == undefined -> PFlabels
                           end,
                       chunks =
                           if PFchunks /= undefined, NFchunks /= undefined -> 'erlang_++'(PFchunks, NFchunks, TrUserData);
                              PFchunks == undefined -> NFchunks;
                              NFchunks == undefined -> PFchunks
                           end}.

-compile({nowarn_unused_function,merge_msg_Chunk/3}).
merge_msg_Chunk(#'Chunk'{start_timestamp_ms = PFstart_timestamp_ms, end_timestamp_ms = PFend_timestamp_ms, encoding = PFencoding, data = PFdata},
                #'Chunk'{start_timestamp_ms = NFstart_timestamp_ms, end_timestamp_ms = NFend_timestamp_ms, encoding = NFencoding, data = NFdata}, _) ->
    #'Chunk'{start_timestamp_ms =
                 if NFstart_timestamp_ms =:= undefined -> PFstart_timestamp_ms;
                    true -> NFstart_timestamp_ms
                 end,
             end_timestamp_ms =
                 if NFend_timestamp_ms =:= undefined -> PFend_timestamp_ms;
                    true -> NFend_timestamp_ms
                 end,
             encoding =
                 if NFencoding =:= undefined -> PFencoding;
                    true -> NFencoding
                 end,
             data =
                 if NFdata =:= undefined -> PFdata;
                    true -> NFdata
                 end}.

-compile({nowarn_unused_function,merge_msg_TransferChunksResponse/3}).
merge_msg_TransferChunksResponse(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_TimeSeries/3}).
merge_msg_TimeSeries(#'TimeSeries'{labels = PFlabels, samples = PFsamples}, #'TimeSeries'{labels = NFlabels, samples = NFsamples}, TrUserData) ->
    #'TimeSeries'{labels =
                      if PFlabels /= undefined, NFlabels /= undefined -> 'erlang_++'(PFlabels, NFlabels, TrUserData);
                         PFlabels == undefined -> NFlabels;
                         NFlabels == undefined -> PFlabels
                      end,
                  samples =
                      if PFsamples /= undefined, NFsamples /= undefined -> 'erlang_++'(PFsamples, NFsamples, TrUserData);
                         PFsamples == undefined -> NFsamples;
                         NFsamples == undefined -> PFsamples
                      end}.

-compile({nowarn_unused_function,merge_msg_LabelPair/3}).
merge_msg_LabelPair(#'LabelPair'{name = PFname, value = PFvalue}, #'LabelPair'{name = NFname, value = NFvalue}, _) ->
    #'LabelPair'{name =
                     if NFname =:= undefined -> PFname;
                        true -> NFname
                     end,
                 value =
                     if NFvalue =:= undefined -> PFvalue;
                        true -> NFvalue
                     end}.

-compile({nowarn_unused_function,merge_msg_Sample/3}).
merge_msg_Sample(#'Sample'{value = PFvalue, timestamp_ms = PFtimestamp_ms}, #'Sample'{value = NFvalue, timestamp_ms = NFtimestamp_ms}, _) ->
    #'Sample'{value =
                  if NFvalue =:= undefined -> PFvalue;
                     true -> NFvalue
                  end,
              timestamp_ms =
                  if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                     true -> NFtimestamp_ms
                  end}.

-compile({nowarn_unused_function,merge_msg_LabelMatchers/3}).
merge_msg_LabelMatchers(#'LabelMatchers'{matchers = PFmatchers}, #'LabelMatchers'{matchers = NFmatchers}, TrUserData) ->
    #'LabelMatchers'{matchers =
                         if PFmatchers /= undefined, NFmatchers /= undefined -> 'erlang_++'(PFmatchers, NFmatchers, TrUserData);
                            PFmatchers == undefined -> NFmatchers;
                            NFmatchers == undefined -> PFmatchers
                         end}.

-compile({nowarn_unused_function,merge_msg_MetricMetadata/3}).
merge_msg_MetricMetadata(#'MetricMetadata'{type = PFtype, metric_name = PFmetric_name, help = PFhelp, unit = PFunit}, #'MetricMetadata'{type = NFtype, metric_name = NFmetric_name, help = NFhelp, unit = NFunit}, _) ->
    #'MetricMetadata'{type =
                          if NFtype =:= undefined -> PFtype;
                             true -> NFtype
                          end,
                      metric_name =
                          if NFmetric_name =:= undefined -> PFmetric_name;
                             true -> NFmetric_name
                          end,
                      help =
                          if NFhelp =:= undefined -> PFhelp;
                             true -> NFhelp
                          end,
                      unit =
                          if NFunit =:= undefined -> PFunit;
                             true -> NFunit
                          end}.

-compile({nowarn_unused_function,merge_msg_CortexMetric/3}).
merge_msg_CortexMetric(#'CortexMetric'{labels = PFlabels}, #'CortexMetric'{labels = NFlabels}, TrUserData) ->
    #'CortexMetric'{labels =
                        if PFlabels /= undefined, NFlabels /= undefined -> 'erlang_++'(PFlabels, NFlabels, TrUserData);
                           PFlabels == undefined -> NFlabels;
                           NFlabels == undefined -> PFlabels
                        end}.

-compile({nowarn_unused_function,merge_msg_LabelMatcher/3}).
merge_msg_LabelMatcher(#'LabelMatcher'{type = PFtype, name = PFname, value = PFvalue}, #'LabelMatcher'{type = NFtype, name = NFname, value = NFvalue}, _) ->
    #'LabelMatcher'{type =
                        if NFtype =:= undefined -> PFtype;
                           true -> NFtype
                        end,
                    name =
                        if NFname =:= undefined -> PFname;
                           true -> NFname
                        end,
                    value =
                        if NFvalue =:= undefined -> PFvalue;
                           true -> NFvalue
                        end}.

-compile({nowarn_unused_function,merge_msg_TimeSeriesFile/3}).
merge_msg_TimeSeriesFile(#'TimeSeriesFile'{from_ingester_id = PFfrom_ingester_id, user_id = PFuser_id, filename = PFfilename, data = PFdata},
                         #'TimeSeriesFile'{from_ingester_id = NFfrom_ingester_id, user_id = NFuser_id, filename = NFfilename, data = NFdata}, _) ->
    #'TimeSeriesFile'{from_ingester_id =
                          if NFfrom_ingester_id =:= undefined -> PFfrom_ingester_id;
                             true -> NFfrom_ingester_id
                          end,
                      user_id =
                          if NFuser_id =:= undefined -> PFuser_id;
                             true -> NFuser_id
                          end,
                      filename =
                          if NFfilename =:= undefined -> PFfilename;
                             true -> NFfilename
                          end,
                      data =
                          if NFdata =:= undefined -> PFdata;
                             true -> NFdata
                          end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'WriteRequest' -> v_msg_WriteRequest(Msg, [MsgName], TrUserData);
        'WriteResponse' -> v_msg_WriteResponse(Msg, [MsgName], TrUserData);
        'ReadRequest' -> v_msg_ReadRequest(Msg, [MsgName], TrUserData);
        'ReadResponse' -> v_msg_ReadResponse(Msg, [MsgName], TrUserData);
        'QueryRequest' -> v_msg_QueryRequest(Msg, [MsgName], TrUserData);
        'QueryResponse' -> v_msg_QueryResponse(Msg, [MsgName], TrUserData);
        'QueryStreamResponse' -> v_msg_QueryStreamResponse(Msg, [MsgName], TrUserData);
        'LabelValuesRequest' -> v_msg_LabelValuesRequest(Msg, [MsgName], TrUserData);
        'LabelValuesResponse' -> v_msg_LabelValuesResponse(Msg, [MsgName], TrUserData);
        'LabelNamesRequest' -> v_msg_LabelNamesRequest(Msg, [MsgName], TrUserData);
        'LabelNamesResponse' -> v_msg_LabelNamesResponse(Msg, [MsgName], TrUserData);
        'UserStatsRequest' -> v_msg_UserStatsRequest(Msg, [MsgName], TrUserData);
        'UserStatsResponse' -> v_msg_UserStatsResponse(Msg, [MsgName], TrUserData);
        'UserIDStatsResponse' -> v_msg_UserIDStatsResponse(Msg, [MsgName], TrUserData);
        'UsersStatsResponse' -> v_msg_UsersStatsResponse(Msg, [MsgName], TrUserData);
        'MetricsForLabelMatchersRequest' -> v_msg_MetricsForLabelMatchersRequest(Msg, [MsgName], TrUserData);
        'MetricsForLabelMatchersResponse' -> v_msg_MetricsForLabelMatchersResponse(Msg, [MsgName], TrUserData);
        'MetricsMetadataRequest' -> v_msg_MetricsMetadataRequest(Msg, [MsgName], TrUserData);
        'MetricsMetadataResponse' -> v_msg_MetricsMetadataResponse(Msg, [MsgName], TrUserData);
        'TimeSeriesChunk' -> v_msg_TimeSeriesChunk(Msg, [MsgName], TrUserData);
        'Chunk' -> v_msg_Chunk(Msg, [MsgName], TrUserData);
        'TransferChunksResponse' -> v_msg_TransferChunksResponse(Msg, [MsgName], TrUserData);
        'TimeSeries' -> v_msg_TimeSeries(Msg, [MsgName], TrUserData);
        'LabelPair' -> v_msg_LabelPair(Msg, [MsgName], TrUserData);
        'Sample' -> v_msg_Sample(Msg, [MsgName], TrUserData);
        'LabelMatchers' -> v_msg_LabelMatchers(Msg, [MsgName], TrUserData);
        'MetricMetadata' -> v_msg_MetricMetadata(Msg, [MsgName], TrUserData);
        'CortexMetric' -> v_msg_CortexMetric(Msg, [MsgName], TrUserData);
        'LabelMatcher' -> v_msg_LabelMatcher(Msg, [MsgName], TrUserData);
        'TimeSeriesFile' -> v_msg_TimeSeriesFile(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_WriteRequest/3}).
-dialyzer({nowarn_function,v_msg_WriteRequest/3}).
v_msg_WriteRequest(#'WriteRequest'{timeseries = F1, 'Source' = F2, metadata = F3}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeSeries(Elem, [timeseries | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeSeries'}}, F1, [timeseries | Path])
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_WriteRequest.SourceEnum'(F2, ['Source' | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_MetricMetadata(Elem, [metadata | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'MetricMetadata'}}, F3, [metadata | Path])
    end,
    ok;
v_msg_WriteRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'WriteRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_WriteResponse/3}).
-dialyzer({nowarn_function,v_msg_WriteResponse/3}).
v_msg_WriteResponse(#'WriteResponse'{}, _Path, _) -> ok;
v_msg_WriteResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'WriteResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadRequest/3}).
-dialyzer({nowarn_function,v_msg_ReadRequest/3}).
v_msg_ReadRequest(#'ReadRequest'{queries = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_QueryRequest(Elem, [queries | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'QueryRequest'}}, F1, [queries | Path])
    end,
    ok;
v_msg_ReadRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReadRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadResponse/3}).
-dialyzer({nowarn_function,v_msg_ReadResponse/3}).
v_msg_ReadResponse(#'ReadResponse'{results = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_QueryResponse(Elem, [results | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'QueryResponse'}}, F1, [results | Path])
    end,
    ok;
v_msg_ReadResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReadResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryRequest/3}).
-dialyzer({nowarn_function,v_msg_QueryRequest/3}).
v_msg_QueryRequest(#'QueryRequest'{start_timestamp_ms = F1, end_timestamp_ms = F2, matchers = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [start_timestamp_ms | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [end_timestamp_ms | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_LabelMatcher(Elem, [matchers | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelMatcher'}}, F3, [matchers | Path])
    end,
    ok;
v_msg_QueryRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryResponse/3}).
-dialyzer({nowarn_function,v_msg_QueryResponse/3}).
v_msg_QueryResponse(#'QueryResponse'{timeseries = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeSeries(Elem, [timeseries | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeSeries'}}, F1, [timeseries | Path])
    end,
    ok;
v_msg_QueryResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryStreamResponse/3}).
-dialyzer({nowarn_function,v_msg_QueryStreamResponse/3}).
v_msg_QueryStreamResponse(#'QueryStreamResponse'{chunkseries = F1, timeseries = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeSeriesChunk(Elem, [chunkseries | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeSeriesChunk'}}, F1, [chunkseries | Path])
    end,
    if is_list(F2) ->
           _ = [v_msg_TimeSeries(Elem, [timeseries | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeSeries'}}, F2, [timeseries | Path])
    end,
    ok;
v_msg_QueryStreamResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryStreamResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelValuesRequest/3}).
-dialyzer({nowarn_function,v_msg_LabelValuesRequest/3}).
v_msg_LabelValuesRequest(#'LabelValuesRequest'{label_name = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [label_name | Path], TrUserData)
    end,
    ok;
v_msg_LabelValuesRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelValuesRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelValuesResponse/3}).
-dialyzer({nowarn_function,v_msg_LabelValuesResponse/3}).
v_msg_LabelValuesResponse(#'LabelValuesResponse'{label_values = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [label_values | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F1, [label_values | Path])
    end,
    ok;
v_msg_LabelValuesResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelValuesResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelNamesRequest/3}).
-dialyzer({nowarn_function,v_msg_LabelNamesRequest/3}).
v_msg_LabelNamesRequest(#'LabelNamesRequest'{}, _Path, _) -> ok;
v_msg_LabelNamesRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelNamesRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelNamesResponse/3}).
-dialyzer({nowarn_function,v_msg_LabelNamesResponse/3}).
v_msg_LabelNamesResponse(#'LabelNamesResponse'{label_names = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [label_names | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F1, [label_names | Path])
    end,
    ok;
v_msg_LabelNamesResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelNamesResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserStatsRequest/3}).
-dialyzer({nowarn_function,v_msg_UserStatsRequest/3}).
v_msg_UserStatsRequest(#'UserStatsRequest'{}, _Path, _) -> ok;
v_msg_UserStatsRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserStatsRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserStatsResponse/3}).
-dialyzer({nowarn_function,v_msg_UserStatsResponse/3}).
v_msg_UserStatsResponse(#'UserStatsResponse'{ingestion_rate = F1, num_series = F2, api_ingestion_rate = F3, rule_ingestion_rate = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [ingestion_rate | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [num_series | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [api_ingestion_rate | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [rule_ingestion_rate | Path], TrUserData)
    end,
    ok;
v_msg_UserStatsResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserStatsResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserIDStatsResponse/3}).
-dialyzer({nowarn_function,v_msg_UserIDStatsResponse/3}).
v_msg_UserIDStatsResponse(#'UserIDStatsResponse'{user_id = F1, data = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [user_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_UserStatsResponse(F2, [data | Path], TrUserData)
    end,
    ok;
v_msg_UserIDStatsResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserIDStatsResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_UsersStatsResponse/3}).
-dialyzer({nowarn_function,v_msg_UsersStatsResponse/3}).
v_msg_UsersStatsResponse(#'UsersStatsResponse'{stats = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_UserIDStatsResponse(Elem, [stats | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'UserIDStatsResponse'}}, F1, [stats | Path])
    end,
    ok;
v_msg_UsersStatsResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UsersStatsResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetricsForLabelMatchersRequest/3}).
-dialyzer({nowarn_function,v_msg_MetricsForLabelMatchersRequest/3}).
v_msg_MetricsForLabelMatchersRequest(#'MetricsForLabelMatchersRequest'{start_timestamp_ms = F1, end_timestamp_ms = F2, matchers_set = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [start_timestamp_ms | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [end_timestamp_ms | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_LabelMatchers(Elem, [matchers_set | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelMatchers'}}, F3, [matchers_set | Path])
    end,
    ok;
v_msg_MetricsForLabelMatchersRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetricsForLabelMatchersRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetricsForLabelMatchersResponse/3}).
-dialyzer({nowarn_function,v_msg_MetricsForLabelMatchersResponse/3}).
v_msg_MetricsForLabelMatchersResponse(#'MetricsForLabelMatchersResponse'{metric = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_CortexMetric(Elem, [metric | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'CortexMetric'}}, F1, [metric | Path])
    end,
    ok;
v_msg_MetricsForLabelMatchersResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetricsForLabelMatchersResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetricsMetadataRequest/3}).
-dialyzer({nowarn_function,v_msg_MetricsMetadataRequest/3}).
v_msg_MetricsMetadataRequest(#'MetricsMetadataRequest'{}, _Path, _) -> ok;
v_msg_MetricsMetadataRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetricsMetadataRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetricsMetadataResponse/3}).
-dialyzer({nowarn_function,v_msg_MetricsMetadataResponse/3}).
v_msg_MetricsMetadataResponse(#'MetricsMetadataResponse'{metadata = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_MetricMetadata(Elem, [metadata | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'MetricMetadata'}}, F1, [metadata | Path])
    end,
    ok;
v_msg_MetricsMetadataResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetricsMetadataResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeSeriesChunk/3}).
-dialyzer({nowarn_function,v_msg_TimeSeriesChunk/3}).
v_msg_TimeSeriesChunk(#'TimeSeriesChunk'{from_ingester_id = F1, user_id = F2, labels = F3, chunks = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [from_ingester_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [user_id | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_LabelPair(Elem, [labels | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelPair'}}, F3, [labels | Path])
    end,
    if is_list(F4) ->
           _ = [v_msg_Chunk(Elem, [chunks | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Chunk'}}, F4, [chunks | Path])
    end,
    ok;
v_msg_TimeSeriesChunk(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeSeriesChunk'}, X, Path).

-compile({nowarn_unused_function,v_msg_Chunk/3}).
-dialyzer({nowarn_function,v_msg_Chunk/3}).
v_msg_Chunk(#'Chunk'{start_timestamp_ms = F1, end_timestamp_ms = F2, encoding = F3, data = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [start_timestamp_ms | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [end_timestamp_ms | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [encoding | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [data | Path], TrUserData)
    end,
    ok;
v_msg_Chunk(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Chunk'}, X, Path).

-compile({nowarn_unused_function,v_msg_TransferChunksResponse/3}).
-dialyzer({nowarn_function,v_msg_TransferChunksResponse/3}).
v_msg_TransferChunksResponse(#'TransferChunksResponse'{}, _Path, _) -> ok;
v_msg_TransferChunksResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TransferChunksResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeSeries/3}).
-dialyzer({nowarn_function,v_msg_TimeSeries/3}).
v_msg_TimeSeries(#'TimeSeries'{labels = F1, samples = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_LabelPair(Elem, [labels | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelPair'}}, F1, [labels | Path])
    end,
    if is_list(F2) ->
           _ = [v_msg_Sample(Elem, [samples | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Sample'}}, F2, [samples | Path])
    end,
    ok;
v_msg_TimeSeries(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeSeries'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelPair/3}).
-dialyzer({nowarn_function,v_msg_LabelPair/3}).
v_msg_LabelPair(#'LabelPair'{name = F1, value = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path], TrUserData)
    end,
    ok;
v_msg_LabelPair(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelPair'}, X, Path).

-compile({nowarn_unused_function,v_msg_Sample/3}).
-dialyzer({nowarn_function,v_msg_Sample/3}).
v_msg_Sample(#'Sample'{value = F1, timestamp_ms = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp_ms | Path], TrUserData)
    end,
    ok;
v_msg_Sample(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Sample'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelMatchers/3}).
-dialyzer({nowarn_function,v_msg_LabelMatchers/3}).
v_msg_LabelMatchers(#'LabelMatchers'{matchers = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_LabelMatcher(Elem, [matchers | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelMatcher'}}, F1, [matchers | Path])
    end,
    ok;
v_msg_LabelMatchers(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelMatchers'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetricMetadata/3}).
-dialyzer({nowarn_function,v_msg_MetricMetadata/3}).
v_msg_MetricMetadata(#'MetricMetadata'{type = F1, metric_name = F2, help = F3, unit = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_MetricMetadata.MetricType'(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [metric_name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [help | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [unit | Path], TrUserData)
    end,
    ok;
v_msg_MetricMetadata(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetricMetadata'}, X, Path).

-compile({nowarn_unused_function,v_msg_CortexMetric/3}).
-dialyzer({nowarn_function,v_msg_CortexMetric/3}).
v_msg_CortexMetric(#'CortexMetric'{labels = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_LabelPair(Elem, [labels | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'LabelPair'}}, F1, [labels | Path])
    end,
    ok;
v_msg_CortexMetric(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CortexMetric'}, X, Path).

-compile({nowarn_unused_function,v_msg_LabelMatcher/3}).
-dialyzer({nowarn_function,v_msg_LabelMatcher/3}).
v_msg_LabelMatcher(#'LabelMatcher'{type = F1, name = F2, value = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_MatchType(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [value | Path], TrUserData)
    end,
    ok;
v_msg_LabelMatcher(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LabelMatcher'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeSeriesFile/3}).
-dialyzer({nowarn_function,v_msg_TimeSeriesFile/3}).
v_msg_TimeSeriesFile(#'TimeSeriesFile'{from_ingester_id = F1, user_id = F2, filename = F3, data = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [from_ingester_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [user_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [filename | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [data | Path], TrUserData)
    end,
    ok;
v_msg_TimeSeriesFile(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeSeriesFile'}, X, Path).

-compile({nowarn_unused_function,'v_enum_WriteRequest.SourceEnum'/3}).
-dialyzer({nowarn_function,'v_enum_WriteRequest.SourceEnum'/3}).
'v_enum_WriteRequest.SourceEnum'('API', _Path, _TrUserData) -> ok;
'v_enum_WriteRequest.SourceEnum'('RULE', _Path, _TrUserData) -> ok;
'v_enum_WriteRequest.SourceEnum'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_WriteRequest.SourceEnum'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'WriteRequest.SourceEnum'}, X, Path).

-compile({nowarn_unused_function,'v_enum_MetricMetadata.MetricType'/3}).
-dialyzer({nowarn_function,'v_enum_MetricMetadata.MetricType'/3}).
'v_enum_MetricMetadata.MetricType'('UNKNOWN', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('COUNTER', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('GAUGE', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('HISTOGRAM', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('GAUGEHISTOGRAM', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('SUMMARY', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('INFO', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'('STATESET', _Path, _TrUserData) -> ok;
'v_enum_MetricMetadata.MetricType'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_MetricMetadata.MetricType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MetricMetadata.MetricType'}, X, Path).

-compile({nowarn_unused_function,v_enum_MatchType/3}).
-dialyzer({nowarn_function,v_enum_MatchType/3}).
v_enum_MatchType('EQUAL', _Path, _TrUserData) -> ok;
v_enum_MatchType('NOT_EQUAL', _Path, _TrUserData) -> ok;
v_enum_MatchType('REGEX_MATCH', _Path, _TrUserData) -> ok;
v_enum_MatchType('REGEX_NO_MATCH', _Path, _TrUserData) -> ok;
v_enum_MatchType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_MatchType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MatchType'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'WriteRequest.SourceEnum'}, [{'API', 0}, {'RULE', 1}]},
     {{enum, 'MetricMetadata.MetricType'}, [{'UNKNOWN', 0}, {'COUNTER', 1}, {'GAUGE', 2}, {'HISTOGRAM', 3}, {'GAUGEHISTOGRAM', 4}, {'SUMMARY', 5}, {'INFO', 6}, {'STATESET', 7}]},
     {{enum, 'MatchType'}, [{'EQUAL', 0}, {'NOT_EQUAL', 1}, {'REGEX_MATCH', 2}, {'REGEX_NO_MATCH', 3}]},
     {{msg, 'WriteRequest'},
      [#field{name = timeseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "PreallocTimeseries"}]},
       #field{name = 'Source', fnum = 2, rnum = 3, type = {enum, 'WriteRequest.SourceEnum'}, occurrence = optional, opts = []},
       #field{name = metadata, fnum = 3, rnum = 4, type = {msg, 'MetricMetadata'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], true}]}]},
     {{msg, 'WriteResponse'}, []},
     {{msg, 'ReadRequest'}, [#field{name = queries, fnum = 1, rnum = 2, type = {msg, 'QueryRequest'}, occurrence = repeated, opts = []}]},
     {{msg, 'ReadResponse'}, [#field{name = results, fnum = 1, rnum = 2, type = {msg, 'QueryResponse'}, occurrence = repeated, opts = []}]},
     {{msg, 'QueryRequest'},
      [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
       #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = matchers, fnum = 3, rnum = 4, type = {msg, 'LabelMatcher'}, occurrence = repeated, opts = []}]},
     {{msg, 'QueryResponse'}, [#field{name = timeseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}]},
     {{msg, 'QueryStreamResponse'},
      [#field{name = chunkseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeriesChunk'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]},
       #field{name = timeseries, fnum = 2, rnum = 3, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}]},
     {{msg, 'LabelValuesRequest'}, [#field{name = label_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}]},
     {{msg, 'LabelValuesResponse'}, [#field{name = label_values, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}]},
     {{msg, 'LabelNamesRequest'}, []},
     {{msg, 'LabelNamesResponse'}, [#field{name = label_names, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}]},
     {{msg, 'UserStatsRequest'}, []},
     {{msg, 'UserStatsResponse'},
      [#field{name = ingestion_rate, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []},
       #field{name = num_series, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = api_ingestion_rate, fnum = 3, rnum = 4, type = double, occurrence = optional, opts = []},
       #field{name = rule_ingestion_rate, fnum = 4, rnum = 5, type = double, occurrence = optional, opts = []}]},
     {{msg, 'UserIDStatsResponse'}, [#field{name = user_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = data, fnum = 2, rnum = 3, type = {msg, 'UserStatsResponse'}, occurrence = optional, opts = []}]},
     {{msg, 'UsersStatsResponse'}, [#field{name = stats, fnum = 1, rnum = 2, type = {msg, 'UserIDStatsResponse'}, occurrence = repeated, opts = []}]},
     {{msg, 'MetricsForLabelMatchersRequest'},
      [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
       #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = matchers_set, fnum = 3, rnum = 4, type = {msg, 'LabelMatchers'}, occurrence = repeated, opts = []}]},
     {{msg, 'MetricsForLabelMatchersResponse'}, [#field{name = metric, fnum = 1, rnum = 2, type = {msg, 'CortexMetric'}, occurrence = repeated, opts = []}]},
     {{msg, 'MetricsMetadataRequest'}, []},
     {{msg, 'MetricsMetadataResponse'}, [#field{name = metadata, fnum = 1, rnum = 2, type = {msg, 'MetricMetadata'}, occurrence = repeated, opts = []}]},
     {{msg, 'TimeSeriesChunk'},
      [#field{name = from_ingester_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = user_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = labels, fnum = 3, rnum = 4, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]},
       #field{name = chunks, fnum = 4, rnum = 5, type = {msg, 'Chunk'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}]},
     {{msg, 'Chunk'},
      [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
       #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = encoding, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []},
       #field{name = data, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'TransferChunksResponse'}, []},
     {{msg, 'TimeSeries'},
      [#field{name = labels, fnum = 1, rnum = 2, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]},
       #field{name = samples, fnum = 2, rnum = 3, type = {msg, 'Sample'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}]},
     {{msg, 'LabelPair'}, [#field{name = name, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'Sample'}, [#field{name = value, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []}, #field{name = timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, 'LabelMatchers'}, [#field{name = matchers, fnum = 1, rnum = 2, type = {msg, 'LabelMatcher'}, occurrence = repeated, opts = []}]},
     {{msg, 'MetricMetadata'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MetricMetadata.MetricType'}, occurrence = optional, opts = []},
       #field{name = metric_name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = help, fnum = 4, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = unit, fnum = 5, rnum = 5, type = string, occurrence = optional, opts = []}]},
     {{msg, 'CortexMetric'}, [#field{name = labels, fnum = 1, rnum = 2, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]}]},
     {{msg, 'LabelMatcher'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MatchType'}, occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, 'TimeSeriesFile'},
      [#field{name = from_ingester_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = user_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = filename, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = data, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['WriteRequest',
     'WriteResponse',
     'ReadRequest',
     'ReadResponse',
     'QueryRequest',
     'QueryResponse',
     'QueryStreamResponse',
     'LabelValuesRequest',
     'LabelValuesResponse',
     'LabelNamesRequest',
     'LabelNamesResponse',
     'UserStatsRequest',
     'UserStatsResponse',
     'UserIDStatsResponse',
     'UsersStatsResponse',
     'MetricsForLabelMatchersRequest',
     'MetricsForLabelMatchersResponse',
     'MetricsMetadataRequest',
     'MetricsMetadataResponse',
     'TimeSeriesChunk',
     'Chunk',
     'TransferChunksResponse',
     'TimeSeries',
     'LabelPair',
     'Sample',
     'LabelMatchers',
     'MetricMetadata',
     'CortexMetric',
     'LabelMatcher',
     'TimeSeriesFile'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['WriteRequest',
     'WriteResponse',
     'ReadRequest',
     'ReadResponse',
     'QueryRequest',
     'QueryResponse',
     'QueryStreamResponse',
     'LabelValuesRequest',
     'LabelValuesResponse',
     'LabelNamesRequest',
     'LabelNamesResponse',
     'UserStatsRequest',
     'UserStatsResponse',
     'UserIDStatsResponse',
     'UsersStatsResponse',
     'MetricsForLabelMatchersRequest',
     'MetricsForLabelMatchersResponse',
     'MetricsMetadataRequest',
     'MetricsMetadataResponse',
     'TimeSeriesChunk',
     'Chunk',
     'TransferChunksResponse',
     'TimeSeries',
     'LabelPair',
     'Sample',
     'LabelMatchers',
     'MetricMetadata',
     'CortexMetric',
     'LabelMatcher',
     'TimeSeriesFile'].


get_enum_names() -> ['WriteRequest.SourceEnum', 'MetricMetadata.MetricType', 'MatchType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('WriteRequest') ->
    [#field{name = timeseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "PreallocTimeseries"}]},
     #field{name = 'Source', fnum = 2, rnum = 3, type = {enum, 'WriteRequest.SourceEnum'}, occurrence = optional, opts = []},
     #field{name = metadata, fnum = 3, rnum = 4, type = {msg, 'MetricMetadata'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], true}]}];
find_msg_def('WriteResponse') -> [];
find_msg_def('ReadRequest') -> [#field{name = queries, fnum = 1, rnum = 2, type = {msg, 'QueryRequest'}, occurrence = repeated, opts = []}];
find_msg_def('ReadResponse') -> [#field{name = results, fnum = 1, rnum = 2, type = {msg, 'QueryResponse'}, occurrence = repeated, opts = []}];
find_msg_def('QueryRequest') ->
    [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
     #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = matchers, fnum = 3, rnum = 4, type = {msg, 'LabelMatcher'}, occurrence = repeated, opts = []}];
find_msg_def('QueryResponse') -> [#field{name = timeseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}];
find_msg_def('QueryStreamResponse') ->
    [#field{name = chunkseries, fnum = 1, rnum = 2, type = {msg, 'TimeSeriesChunk'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]},
     #field{name = timeseries, fnum = 2, rnum = 3, type = {msg, 'TimeSeries'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}];
find_msg_def('LabelValuesRequest') -> [#field{name = label_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}];
find_msg_def('LabelValuesResponse') -> [#field{name = label_values, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}];
find_msg_def('LabelNamesRequest') -> [];
find_msg_def('LabelNamesResponse') -> [#field{name = label_names, fnum = 1, rnum = 2, type = string, occurrence = repeated, opts = []}];
find_msg_def('UserStatsRequest') -> [];
find_msg_def('UserStatsResponse') ->
    [#field{name = ingestion_rate, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []},
     #field{name = num_series, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = api_ingestion_rate, fnum = 3, rnum = 4, type = double, occurrence = optional, opts = []},
     #field{name = rule_ingestion_rate, fnum = 4, rnum = 5, type = double, occurrence = optional, opts = []}];
find_msg_def('UserIDStatsResponse') -> [#field{name = user_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = data, fnum = 2, rnum = 3, type = {msg, 'UserStatsResponse'}, occurrence = optional, opts = []}];
find_msg_def('UsersStatsResponse') -> [#field{name = stats, fnum = 1, rnum = 2, type = {msg, 'UserIDStatsResponse'}, occurrence = repeated, opts = []}];
find_msg_def('MetricsForLabelMatchersRequest') ->
    [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
     #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = matchers_set, fnum = 3, rnum = 4, type = {msg, 'LabelMatchers'}, occurrence = repeated, opts = []}];
find_msg_def('MetricsForLabelMatchersResponse') -> [#field{name = metric, fnum = 1, rnum = 2, type = {msg, 'CortexMetric'}, occurrence = repeated, opts = []}];
find_msg_def('MetricsMetadataRequest') -> [];
find_msg_def('MetricsMetadataResponse') -> [#field{name = metadata, fnum = 1, rnum = 2, type = {msg, 'MetricMetadata'}, occurrence = repeated, opts = []}];
find_msg_def('TimeSeriesChunk') ->
    [#field{name = from_ingester_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = user_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = labels, fnum = 3, rnum = 4, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]},
     #field{name = chunks, fnum = 4, rnum = 5, type = {msg, 'Chunk'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}];
find_msg_def('Chunk') ->
    [#field{name = start_timestamp_ms, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
     #field{name = end_timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = encoding, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []},
     #field{name = data, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}];
find_msg_def('TransferChunksResponse') -> [];
find_msg_def('TimeSeries') ->
    [#field{name = labels, fnum = 1, rnum = 2, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]},
     #field{name = samples, fnum = 2, rnum = 3, type = {msg, 'Sample'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}]}];
find_msg_def('LabelPair') -> [#field{name = name, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def('Sample') -> [#field{name = value, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []}, #field{name = timestamp_ms, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def('LabelMatchers') -> [#field{name = matchers, fnum = 1, rnum = 2, type = {msg, 'LabelMatcher'}, occurrence = repeated, opts = []}];
find_msg_def('MetricMetadata') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MetricMetadata.MetricType'}, occurrence = optional, opts = []},
     #field{name = metric_name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = help, fnum = 4, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = unit, fnum = 5, rnum = 5, type = string, occurrence = optional, opts = []}];
find_msg_def('CortexMetric') -> [#field{name = labels, fnum = 1, rnum = 2, type = {msg, 'LabelPair'}, occurrence = repeated, opts = [{[gogoproto, '.', nullable], false}, {[gogoproto, '.', customtype], "LabelAdapter"}]}];
find_msg_def('LabelMatcher') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MatchType'}, occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def('TimeSeriesFile') ->
    [#field{name = from_ingester_id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = user_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = filename, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = data, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('WriteRequest.SourceEnum') -> [{'API', 0}, {'RULE', 1}];
find_enum_def('MetricMetadata.MetricType') -> [{'UNKNOWN', 0}, {'COUNTER', 1}, {'GAUGE', 2}, {'HISTOGRAM', 3}, {'GAUGEHISTOGRAM', 4}, {'SUMMARY', 5}, {'INFO', 6}, {'STATESET', 7}];
find_enum_def('MatchType') -> [{'EQUAL', 0}, {'NOT_EQUAL', 1}, {'REGEX_MATCH', 2}, {'REGEX_NO_MATCH', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('WriteRequest.SourceEnum', Value) -> 'enum_symbol_by_value_WriteRequest.SourceEnum'(Value);
enum_symbol_by_value('MetricMetadata.MetricType', Value) -> 'enum_symbol_by_value_MetricMetadata.MetricType'(Value);
enum_symbol_by_value('MatchType', Value) -> enum_symbol_by_value_MatchType(Value).


enum_value_by_symbol('WriteRequest.SourceEnum', Sym) -> 'enum_value_by_symbol_WriteRequest.SourceEnum'(Sym);
enum_value_by_symbol('MetricMetadata.MetricType', Sym) -> 'enum_value_by_symbol_MetricMetadata.MetricType'(Sym);
enum_value_by_symbol('MatchType', Sym) -> enum_value_by_symbol_MatchType(Sym).


'enum_symbol_by_value_WriteRequest.SourceEnum'(0) -> 'API';
'enum_symbol_by_value_WriteRequest.SourceEnum'(1) -> 'RULE'.


'enum_value_by_symbol_WriteRequest.SourceEnum'('API') -> 0;
'enum_value_by_symbol_WriteRequest.SourceEnum'('RULE') -> 1.

'enum_symbol_by_value_MetricMetadata.MetricType'(0) -> 'UNKNOWN';
'enum_symbol_by_value_MetricMetadata.MetricType'(1) -> 'COUNTER';
'enum_symbol_by_value_MetricMetadata.MetricType'(2) -> 'GAUGE';
'enum_symbol_by_value_MetricMetadata.MetricType'(3) -> 'HISTOGRAM';
'enum_symbol_by_value_MetricMetadata.MetricType'(4) -> 'GAUGEHISTOGRAM';
'enum_symbol_by_value_MetricMetadata.MetricType'(5) -> 'SUMMARY';
'enum_symbol_by_value_MetricMetadata.MetricType'(6) -> 'INFO';
'enum_symbol_by_value_MetricMetadata.MetricType'(7) -> 'STATESET'.


'enum_value_by_symbol_MetricMetadata.MetricType'('UNKNOWN') -> 0;
'enum_value_by_symbol_MetricMetadata.MetricType'('COUNTER') -> 1;
'enum_value_by_symbol_MetricMetadata.MetricType'('GAUGE') -> 2;
'enum_value_by_symbol_MetricMetadata.MetricType'('HISTOGRAM') -> 3;
'enum_value_by_symbol_MetricMetadata.MetricType'('GAUGEHISTOGRAM') -> 4;
'enum_value_by_symbol_MetricMetadata.MetricType'('SUMMARY') -> 5;
'enum_value_by_symbol_MetricMetadata.MetricType'('INFO') -> 6;
'enum_value_by_symbol_MetricMetadata.MetricType'('STATESET') -> 7.

enum_symbol_by_value_MatchType(0) -> 'EQUAL';
enum_symbol_by_value_MatchType(1) -> 'NOT_EQUAL';
enum_symbol_by_value_MatchType(2) -> 'REGEX_MATCH';
enum_symbol_by_value_MatchType(3) -> 'REGEX_NO_MATCH'.


enum_value_by_symbol_MatchType('EQUAL') -> 0;
enum_value_by_symbol_MatchType('NOT_EQUAL') -> 1;
enum_value_by_symbol_MatchType('REGEX_MATCH') -> 2;
enum_value_by_symbol_MatchType('REGEX_NO_MATCH') -> 3.


get_service_names() -> ['Ingester'].


get_service_def('Ingester') ->
    {{service, 'Ingester'},
     [#rpc{name = 'Push', input = 'WriteRequest', output = 'WriteResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'Query', input = 'QueryRequest', output = 'QueryResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'QueryStream', input = 'QueryRequest', output = 'QueryStreamResponse', input_stream = false, output_stream = true, opts = []},
      #rpc{name = 'LabelValues', input = 'LabelValuesRequest', output = 'LabelValuesResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'LabelNames', input = 'LabelNamesRequest', output = 'LabelNamesResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'UserStats', input = 'UserStatsRequest', output = 'UserStatsResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'AllUserStats', input = 'UserStatsRequest', output = 'UsersStatsResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'MetricsForLabelMatchers', input = 'MetricsForLabelMatchersRequest', output = 'MetricsForLabelMatchersResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'MetricsMetadata', input = 'MetricsMetadataRequest', output = 'MetricsMetadataResponse', input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'TransferChunks', input = 'TimeSeriesChunk', output = 'TransferChunksResponse', input_stream = true, output_stream = false, opts = []}]};
get_service_def(_) -> error.


get_rpc_names('Ingester') -> ['Push', 'Query', 'QueryStream', 'LabelValues', 'LabelNames', 'UserStats', 'AllUserStats', 'MetricsForLabelMatchers', 'MetricsMetadata', 'TransferChunks'];
get_rpc_names(_) -> error.


find_rpc_def('Ingester', RpcName) -> find_rpc_def_Ingester(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_Ingester('Push') -> #rpc{name = 'Push', input = 'WriteRequest', output = 'WriteResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('Query') -> #rpc{name = 'Query', input = 'QueryRequest', output = 'QueryResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('QueryStream') -> #rpc{name = 'QueryStream', input = 'QueryRequest', output = 'QueryStreamResponse', input_stream = false, output_stream = true, opts = []};
find_rpc_def_Ingester('LabelValues') -> #rpc{name = 'LabelValues', input = 'LabelValuesRequest', output = 'LabelValuesResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('LabelNames') -> #rpc{name = 'LabelNames', input = 'LabelNamesRequest', output = 'LabelNamesResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('UserStats') -> #rpc{name = 'UserStats', input = 'UserStatsRequest', output = 'UserStatsResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('AllUserStats') -> #rpc{name = 'AllUserStats', input = 'UserStatsRequest', output = 'UsersStatsResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('MetricsForLabelMatchers') -> #rpc{name = 'MetricsForLabelMatchers', input = 'MetricsForLabelMatchersRequest', output = 'MetricsForLabelMatchersResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('MetricsMetadata') -> #rpc{name = 'MetricsMetadata', input = 'MetricsMetadataRequest', output = 'MetricsMetadataResponse', input_stream = false, output_stream = false, opts = []};
find_rpc_def_Ingester('TransferChunks') -> #rpc{name = 'TransferChunks', input = 'TimeSeriesChunk', output = 'TransferChunksResponse', input_stream = true, output_stream = false, opts = []};
find_rpc_def_Ingester(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"cortex.Ingester">>) -> 'Ingester';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('Ingester') -> <<"cortex.Ingester">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"Push">>) -> {'Ingester', 'Push'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"Query">>) -> {'Ingester', 'Query'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"QueryStream">>) -> {'Ingester', 'QueryStream'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"LabelValues">>) -> {'Ingester', 'LabelValues'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"LabelNames">>) -> {'Ingester', 'LabelNames'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"UserStats">>) -> {'Ingester', 'UserStats'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"AllUserStats">>) -> {'Ingester', 'AllUserStats'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"MetricsForLabelMatchers">>) -> {'Ingester', 'MetricsForLabelMatchers'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"MetricsMetadata">>) -> {'Ingester', 'MetricsMetadata'};
fqbins_to_service_and_rpc_name(<<"cortex.Ingester">>, <<"TransferChunks">>) -> {'Ingester', 'TransferChunks'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('Ingester', 'Push') -> {<<"cortex.Ingester">>, <<"Push">>};
service_and_rpc_name_to_fqbins('Ingester', 'Query') -> {<<"cortex.Ingester">>, <<"Query">>};
service_and_rpc_name_to_fqbins('Ingester', 'QueryStream') -> {<<"cortex.Ingester">>, <<"QueryStream">>};
service_and_rpc_name_to_fqbins('Ingester', 'LabelValues') -> {<<"cortex.Ingester">>, <<"LabelValues">>};
service_and_rpc_name_to_fqbins('Ingester', 'LabelNames') -> {<<"cortex.Ingester">>, <<"LabelNames">>};
service_and_rpc_name_to_fqbins('Ingester', 'UserStats') -> {<<"cortex.Ingester">>, <<"UserStats">>};
service_and_rpc_name_to_fqbins('Ingester', 'AllUserStats') -> {<<"cortex.Ingester">>, <<"AllUserStats">>};
service_and_rpc_name_to_fqbins('Ingester', 'MetricsForLabelMatchers') -> {<<"cortex.Ingester">>, <<"MetricsForLabelMatchers">>};
service_and_rpc_name_to_fqbins('Ingester', 'MetricsMetadata') -> {<<"cortex.Ingester">>, <<"MetricsMetadata">>};
service_and_rpc_name_to_fqbins('Ingester', 'TransferChunks') -> {<<"cortex.Ingester">>, <<"TransferChunks">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"cortex.WriteRequest">>) -> 'WriteRequest';
fqbin_to_msg_name(<<"cortex.WriteResponse">>) -> 'WriteResponse';
fqbin_to_msg_name(<<"cortex.ReadRequest">>) -> 'ReadRequest';
fqbin_to_msg_name(<<"cortex.ReadResponse">>) -> 'ReadResponse';
fqbin_to_msg_name(<<"cortex.QueryRequest">>) -> 'QueryRequest';
fqbin_to_msg_name(<<"cortex.QueryResponse">>) -> 'QueryResponse';
fqbin_to_msg_name(<<"cortex.QueryStreamResponse">>) -> 'QueryStreamResponse';
fqbin_to_msg_name(<<"cortex.LabelValuesRequest">>) -> 'LabelValuesRequest';
fqbin_to_msg_name(<<"cortex.LabelValuesResponse">>) -> 'LabelValuesResponse';
fqbin_to_msg_name(<<"cortex.LabelNamesRequest">>) -> 'LabelNamesRequest';
fqbin_to_msg_name(<<"cortex.LabelNamesResponse">>) -> 'LabelNamesResponse';
fqbin_to_msg_name(<<"cortex.UserStatsRequest">>) -> 'UserStatsRequest';
fqbin_to_msg_name(<<"cortex.UserStatsResponse">>) -> 'UserStatsResponse';
fqbin_to_msg_name(<<"cortex.UserIDStatsResponse">>) -> 'UserIDStatsResponse';
fqbin_to_msg_name(<<"cortex.UsersStatsResponse">>) -> 'UsersStatsResponse';
fqbin_to_msg_name(<<"cortex.MetricsForLabelMatchersRequest">>) -> 'MetricsForLabelMatchersRequest';
fqbin_to_msg_name(<<"cortex.MetricsForLabelMatchersResponse">>) -> 'MetricsForLabelMatchersResponse';
fqbin_to_msg_name(<<"cortex.MetricsMetadataRequest">>) -> 'MetricsMetadataRequest';
fqbin_to_msg_name(<<"cortex.MetricsMetadataResponse">>) -> 'MetricsMetadataResponse';
fqbin_to_msg_name(<<"cortex.TimeSeriesChunk">>) -> 'TimeSeriesChunk';
fqbin_to_msg_name(<<"cortex.Chunk">>) -> 'Chunk';
fqbin_to_msg_name(<<"cortex.TransferChunksResponse">>) -> 'TransferChunksResponse';
fqbin_to_msg_name(<<"cortex.TimeSeries">>) -> 'TimeSeries';
fqbin_to_msg_name(<<"cortex.LabelPair">>) -> 'LabelPair';
fqbin_to_msg_name(<<"cortex.Sample">>) -> 'Sample';
fqbin_to_msg_name(<<"cortex.LabelMatchers">>) -> 'LabelMatchers';
fqbin_to_msg_name(<<"cortex.MetricMetadata">>) -> 'MetricMetadata';
fqbin_to_msg_name(<<"cortex.CortexMetric">>) -> 'CortexMetric';
fqbin_to_msg_name(<<"cortex.LabelMatcher">>) -> 'LabelMatcher';
fqbin_to_msg_name(<<"cortex.TimeSeriesFile">>) -> 'TimeSeriesFile';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('WriteRequest') -> <<"cortex.WriteRequest">>;
msg_name_to_fqbin('WriteResponse') -> <<"cortex.WriteResponse">>;
msg_name_to_fqbin('ReadRequest') -> <<"cortex.ReadRequest">>;
msg_name_to_fqbin('ReadResponse') -> <<"cortex.ReadResponse">>;
msg_name_to_fqbin('QueryRequest') -> <<"cortex.QueryRequest">>;
msg_name_to_fqbin('QueryResponse') -> <<"cortex.QueryResponse">>;
msg_name_to_fqbin('QueryStreamResponse') -> <<"cortex.QueryStreamResponse">>;
msg_name_to_fqbin('LabelValuesRequest') -> <<"cortex.LabelValuesRequest">>;
msg_name_to_fqbin('LabelValuesResponse') -> <<"cortex.LabelValuesResponse">>;
msg_name_to_fqbin('LabelNamesRequest') -> <<"cortex.LabelNamesRequest">>;
msg_name_to_fqbin('LabelNamesResponse') -> <<"cortex.LabelNamesResponse">>;
msg_name_to_fqbin('UserStatsRequest') -> <<"cortex.UserStatsRequest">>;
msg_name_to_fqbin('UserStatsResponse') -> <<"cortex.UserStatsResponse">>;
msg_name_to_fqbin('UserIDStatsResponse') -> <<"cortex.UserIDStatsResponse">>;
msg_name_to_fqbin('UsersStatsResponse') -> <<"cortex.UsersStatsResponse">>;
msg_name_to_fqbin('MetricsForLabelMatchersRequest') -> <<"cortex.MetricsForLabelMatchersRequest">>;
msg_name_to_fqbin('MetricsForLabelMatchersResponse') -> <<"cortex.MetricsForLabelMatchersResponse">>;
msg_name_to_fqbin('MetricsMetadataRequest') -> <<"cortex.MetricsMetadataRequest">>;
msg_name_to_fqbin('MetricsMetadataResponse') -> <<"cortex.MetricsMetadataResponse">>;
msg_name_to_fqbin('TimeSeriesChunk') -> <<"cortex.TimeSeriesChunk">>;
msg_name_to_fqbin('Chunk') -> <<"cortex.Chunk">>;
msg_name_to_fqbin('TransferChunksResponse') -> <<"cortex.TransferChunksResponse">>;
msg_name_to_fqbin('TimeSeries') -> <<"cortex.TimeSeries">>;
msg_name_to_fqbin('LabelPair') -> <<"cortex.LabelPair">>;
msg_name_to_fqbin('Sample') -> <<"cortex.Sample">>;
msg_name_to_fqbin('LabelMatchers') -> <<"cortex.LabelMatchers">>;
msg_name_to_fqbin('MetricMetadata') -> <<"cortex.MetricMetadata">>;
msg_name_to_fqbin('CortexMetric') -> <<"cortex.CortexMetric">>;
msg_name_to_fqbin('LabelMatcher') -> <<"cortex.LabelMatcher">>;
msg_name_to_fqbin('TimeSeriesFile') -> <<"cortex.TimeSeriesFile">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"cortex.WriteRequest.SourceEnum">>) -> 'WriteRequest.SourceEnum';
fqbin_to_enum_name(<<"cortex.MetricMetadata.MetricType">>) -> 'MetricMetadata.MetricType';
fqbin_to_enum_name(<<"cortex.MatchType">>) -> 'MatchType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('WriteRequest.SourceEnum') -> <<"cortex.WriteRequest.SourceEnum">>;
enum_name_to_fqbin('MetricMetadata.MetricType') -> <<"cortex.MetricMetadata.MetricType">>;
enum_name_to_fqbin('MatchType') -> <<"cortex.MatchType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> cortex.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "cortex.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["cortex.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["cortex"].


get_msg_containment("cortex") ->
    ['Chunk',
     'CortexMetric',
     'LabelMatcher',
     'LabelMatchers',
     'LabelNamesRequest',
     'LabelNamesResponse',
     'LabelPair',
     'LabelValuesRequest',
     'LabelValuesResponse',
     'MetricMetadata',
     'MetricsForLabelMatchersRequest',
     'MetricsForLabelMatchersResponse',
     'MetricsMetadataRequest',
     'MetricsMetadataResponse',
     'QueryRequest',
     'QueryResponse',
     'QueryStreamResponse',
     'ReadRequest',
     'ReadResponse',
     'Sample',
     'TimeSeries',
     'TimeSeriesChunk',
     'TimeSeriesFile',
     'TransferChunksResponse',
     'UserIDStatsResponse',
     'UserStatsRequest',
     'UserStatsResponse',
     'UsersStatsResponse',
     'WriteRequest',
     'WriteResponse'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("cortex") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("cortex") -> ['Ingester'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("cortex") ->
    [{'Ingester', 'Push'},
     {'Ingester', 'Query'},
     {'Ingester', 'QueryStream'},
     {'Ingester', 'LabelValues'},
     {'Ingester', 'LabelNames'},
     {'Ingester', 'UserStats'},
     {'Ingester', 'AllUserStats'},
     {'Ingester', 'MetricsForLabelMatchers'},
     {'Ingester', 'MetricsMetadata'},
     {'Ingester', 'TransferChunks'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("cortex") -> ['MatchType', 'MetricMetadata.MetricType', 'WriteRequest.SourceEnum'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"cortex.MetricMetadata">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelPair">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelMatcher">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.TimeSeries">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelMatchers">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.CortexMetric">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.WriteRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.UserStatsRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.ReadRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.QueryRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.MetricsMetadataRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.MetricsForLabelMatchersRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelValuesRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelNamesRequest">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.WriteResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.UsersStatsResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.UserStatsResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.UserIDStatsResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.TransferChunksResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.TimeSeriesFile">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.Sample">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.ReadResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.QueryStreamResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.QueryResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.MetricsMetadataResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.MetricsForLabelMatchersResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelValuesResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.LabelNamesResponse">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.TimeSeriesChunk">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(<<"cortex.Chunk">>) -> "cortex";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"cortex.Ingester">>) -> "cortex";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"cortex.MetricMetadata.MetricType">>) -> "cortex";
get_proto_by_enum_name_as_fqbin(<<"cortex.MatchType">>) -> "cortex";
get_proto_by_enum_name_as_fqbin(<<"cortex.WriteRequest.SourceEnum">>) -> "cortex";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.14.1".

gpb_version_as_list() ->
    [4,14,1].
